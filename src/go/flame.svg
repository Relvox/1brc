<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>runtime.newstack (201 samples, 1.34%)</title><rect x="1128.4" y="245" width="15.9" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1131.44" y="255.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (8 samples, 0.05%)</title><rect x="1189.3" y="197" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1192.29" y="207.5" ></text>
</g>
<g >
<title>runtime.unlock2 (3 samples, 0.02%)</title><rect x="912.5" y="213" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="915.46" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (44 samples, 0.29%)</title><rect x="1171.3" y="149" width="3.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1174.32" y="159.5" ></text>
</g>
<g >
<title>runtime.chansend (26 samples, 0.17%)</title><rect x="910.6" y="229" width="2.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="913.65" y="239.5" ></text>
</g>
<g >
<title>main.MapData.func1.1 (6,791 samples, 45.36%)</title><rect x="10.2" y="261" width="535.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="13.16" y="271.5" >main.MapData.func1.1</text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (2 samples, 0.01%)</title><rect x="921.7" y="149" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="924.68" y="159.5" ></text>
</g>
<g >
<title>runtime.semasleep (3 samples, 0.02%)</title><rect x="1188.9" y="181" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1191.90" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (43 samples, 0.29%)</title><rect x="1179.4" y="85" width="3.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1182.36" y="95.5" ></text>
</g>
<g >
<title>runtime.chansend1 (28 samples, 0.19%)</title><rect x="910.5" y="245" width="2.2" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="913.49" y="255.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (44 samples, 0.29%)</title><rect x="1150.7" y="181" width="3.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1153.67" y="191.5" ></text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.01%)</title><rect x="1157.8" y="213" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1160.76" y="223.5" ></text>
</g>
<g >
<title>runtime.preemptall (2 samples, 0.01%)</title><rect x="1188.1" y="213" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1191.11" y="223.5" ></text>
</g>
<g >
<title>runtime.runqgrab.osyield.func1 (11 samples, 0.07%)</title><rect x="1142.6" y="133" width="0.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1145.63" y="143.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (201 samples, 1.34%)</title><rect x="1128.4" y="229" width="15.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1131.44" y="239.5" ></text>
</g>
<g >
<title>runtime.semasleep (43 samples, 0.29%)</title><rect x="1179.4" y="101" width="3.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1182.36" y="111.5" ></text>
</g>
<g >
<title>runtime.lock2 (8 samples, 0.05%)</title><rect x="1189.3" y="229" width="0.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1192.29" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (76 samples, 0.51%)</title><rect x="915.0" y="181" width="6.0" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="917.98" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (68 samples, 0.45%)</title><rect x="1179.1" y="165" width="5.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1182.12" y="175.5" ></text>
</g>
<g >
<title>os.(*File).ReadAt (492 samples, 3.29%)</title><rect x="988.3" y="245" width="38.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="991.29" y="255.5" >os...</text>
</g>
<g >
<title>runtime.chanrecv (19 samples, 0.13%)</title><rect x="441.8" y="229" width="1.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="444.80" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (422 samples, 2.82%)</title><rect x="1038.6" y="245" width="33.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1041.58" y="255.5" >ru..</text>
</g>
<g >
<title>indexbytebody (897 samples, 5.99%)</title><rect x="828.5" y="229" width="70.7" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="831.51" y="239.5" >indexby..</text>
</g>
<g >
<title>runtime.systemstack (6 samples, 0.04%)</title><rect x="1038.0" y="213" width="0.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1041.03" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocMSpanLocked (13 samples, 0.09%)</title><rect x="915.8" y="85" width="1.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="918.85" y="95.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (3 samples, 0.02%)</title><rect x="1188.9" y="165" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1191.90" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2 (23 samples, 0.15%)</title><rect x="1076.7" y="181" width="1.8" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1079.73" y="191.5" ></text>
</g>
<g >
<title>runtime.findObject (7 samples, 0.05%)</title><rect x="1071.3" y="149" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1074.29" y="159.5" ></text>
</g>
<g >
<title>syscall.Syscall6 (485 samples, 3.24%)</title><rect x="988.8" y="197" width="38.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="991.84" y="207.5" >sys..</text>
</g>
<g >
<title>runtime.runSafePointFn (24 samples, 0.16%)</title><rect x="1076.7" y="197" width="1.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1079.73" y="207.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (75 samples, 0.50%)</title><rect x="1144.8" y="197" width="5.9" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1147.75" y="207.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (3 samples, 0.02%)</title><rect x="1179.1" y="101" width="0.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1182.12" y="111.5" ></text>
</g>
<g >
<title>runtime.mapiternext (2 samples, 0.01%)</title><rect x="1072.1" y="213" width="0.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1075.08" y="223.5" ></text>
</g>
<g >
<title>runtime.resetspinning (21 samples, 0.14%)</title><rect x="1126.8" y="213" width="1.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1129.78" y="223.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).allocToCache (3 samples, 0.02%)</title><rect x="919.3" y="85" width="0.3" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="922.32" y="95.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (15 samples, 0.10%)</title><rect x="1070.0" y="181" width="1.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1073.03" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (146 samples, 0.98%)</title><rect x="1144.7" y="229" width="11.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1147.68" y="239.5" ></text>
</g>
<g >
<title>runtime.chanrecv2 (19 samples, 0.13%)</title><rect x="441.8" y="245" width="1.5" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="444.80" y="255.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (2 samples, 0.01%)</title><rect x="1189.1" y="149" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1192.13" y="159.5" ></text>
</g>
<g >
<title>runtime.preemptone (4 samples, 0.03%)</title><rect x="1039.9" y="165" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1042.92" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2 (119 samples, 0.79%)</title><rect x="1144.8" y="213" width="9.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1147.75" y="223.5" ></text>
</g>
<g >
<title>runtime.preemptM (3 samples, 0.02%)</title><rect x="1040.0" y="149" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1043.00" y="159.5" ></text>
</g>
<g >
<title>runtime.lock2 (46 samples, 0.31%)</title><rect x="1179.1" y="117" width="3.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1182.12" y="127.5" ></text>
</g>
<g >
<title>runtime.semasleep (4 samples, 0.03%)</title><rect x="1076.3" y="181" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1079.26" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (6 samples, 0.04%)</title><rect x="1038.0" y="181" width="0.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1041.03" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (8 samples, 0.05%)</title><rect x="1127.8" y="133" width="0.6" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1130.81" y="143.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (4 samples, 0.03%)</title><rect x="1157.9" y="213" width="0.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1160.92" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mspan).init (8 samples, 0.05%)</title><rect x="917.1" y="69" width="0.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="920.11" y="79.5" ></text>
</g>
<g >
<title>runtime.preemptone (2 samples, 0.01%)</title><rect x="1188.1" y="197" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1191.11" y="207.5" ></text>
</g>
<g >
<title>runtime.preemptM (6 samples, 0.04%)</title><rect x="1187.6" y="181" width="0.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1190.64" y="191.5" ></text>
</g>
<g >
<title>syscall.Seek (5 samples, 0.03%)</title><rect x="988.4" y="213" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="991.37" y="223.5" ></text>
</g>
<g >
<title>syscall.setFilePointerEx (5 samples, 0.03%)</title><rect x="988.4" y="197" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="991.37" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (21 samples, 0.14%)</title><rect x="1076.9" y="165" width="1.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1079.89" y="175.5" ></text>
</g>
<g >
<title>runtime.semasleep (17 samples, 0.11%)</title><rect x="1074.8" y="165" width="1.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1077.84" y="175.5" ></text>
</g>
<g >
<title>runtime.(*pallocBits).summarize (2 samples, 0.01%)</title><rect x="917.9" y="37" width="0.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="920.90" y="47.5" ></text>
</g>
<g >
<title>runtime.systemstack (161 samples, 1.08%)</title><rect x="975.6" y="197" width="12.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="978.60" y="207.5" ></text>
</g>
<g >
<title>runtime.preemptone (3 samples, 0.02%)</title><rect x="1157.9" y="165" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1160.92" y="175.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (36 samples, 0.24%)</title><rect x="972.8" y="213" width="2.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="975.76" y="223.5" ></text>
</g>
<g >
<title>runtime.lock2 (5 samples, 0.03%)</title><rect x="1076.2" y="197" width="0.4" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1079.18" y="207.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (2 samples, 0.01%)</title><rect x="1178.3" y="149" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1181.33" y="159.5" ></text>
</g>
<g >
<title>runtime.runqgrab (590 samples, 3.94%)</title><rect x="1080.1" y="165" width="46.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1083.12" y="175.5" >runt..</text>
</g>
<g >
<title>runtime.entersyscall_gcwait (2 samples, 0.01%)</title><rect x="1157.8" y="245" width="0.1" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1160.76" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.01%)</title><rect x="1189.1" y="165" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1192.13" y="175.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (2 samples, 0.01%)</title><rect x="1142.2" y="165" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1145.23" y="175.5" ></text>
</g>
<g >
<title>runtime.semasleep (8 samples, 0.05%)</title><rect x="1189.3" y="213" width="0.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1192.29" y="223.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (4 samples, 0.03%)</title><rect x="1157.9" y="245" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1160.92" y="255.5" ></text>
</g>
<g >
<title>internal/bytealg.IndexByte (53 samples, 0.35%)</title><rect x="658.7" y="229" width="4.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="661.72" y="239.5" ></text>
</g>
<g >
<title>runtime.runqgrab (12 samples, 0.08%)</title><rect x="1142.5" y="149" width="1.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1145.55" y="159.5" ></text>
</g>
<g >
<title>runtime.startm (8 samples, 0.05%)</title><rect x="1127.8" y="181" width="0.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1130.81" y="191.5" ></text>
</g>
<g >
<title>runtime.bgsweep (32 samples, 0.21%)</title><rect x="1036.0" y="261" width="2.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1038.98" y="271.5" ></text>
</g>
<g >
<title>runtime.findObject (104 samples, 0.69%)</title><rect x="980.1" y="149" width="8.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="983.09" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (69 samples, 0.46%)</title><rect x="915.0" y="133" width="5.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="917.98" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (11 samples, 0.07%)</title><rect x="1142.6" y="117" width="0.9" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1145.63" y="127.5" ></text>
</g>
<g >
<title>runtime.stopm (2 samples, 0.01%)</title><rect x="1126.6" y="197" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1129.63" y="207.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (4 samples, 0.03%)</title><rect x="1188.3" y="245" width="0.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1191.27" y="255.5" ></text>
</g>
<g >
<title>runtime.recv (2 samples, 0.01%)</title><rect x="442.4" y="213" width="0.1" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="445.35" y="223.5" ></text>
</g>
<g >
<title>runtime.schedule (28 samples, 0.19%)</title><rect x="1141.4" y="213" width="2.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1144.44" y="223.5" ></text>
</g>
<g >
<title>runtime.gcStart.func1 (2 samples, 0.01%)</title><rect x="1188.1" y="245" width="0.2" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1191.11" y="255.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge.func1 (19 samples, 0.13%)</title><rect x="1156.2" y="245" width="1.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1159.18" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (8 samples, 0.05%)</title><rect x="1127.8" y="149" width="0.6" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1130.81" y="159.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (8 samples, 0.05%)</title><rect x="1071.2" y="197" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1074.21" y="207.5" ></text>
</g>
<g >
<title>runtime.growWork_fast32 (3 samples, 0.02%)</title><rect x="545.2" y="229" width="0.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="548.22" y="239.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).put (68 samples, 0.45%)</title><rect x="1179.1" y="181" width="5.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1182.12" y="191.5" ></text>
</g>
<g >
<title>runtime.(*fixalloc).alloc (11 samples, 0.07%)</title><rect x="916.0" y="69" width="0.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="919.01" y="79.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (75 samples, 0.50%)</title><rect x="1144.8" y="181" width="5.9" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1147.75" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall7 (16 samples, 0.11%)</title><rect x="1174.8" y="149" width="1.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1177.79" y="159.5" ></text>
</g>
<g >
<title>runtime.wbMove (488 samples, 3.26%)</title><rect x="949.8" y="245" width="38.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="952.82" y="255.5" >run..</text>
</g>
<g >
<title>internal/poll.(*FD).Pread (492 samples, 3.29%)</title><rect x="988.3" y="229" width="38.8" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="991.29" y="239.5" >int..</text>
</g>
<g >
<title>gcWriteBarrier (2 samples, 0.01%)</title><rect x="923.7" y="197" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="926.65" y="207.5" ></text>
</g>
<g >
<title>runtime.mcall (688 samples, 4.60%)</title><rect x="1074.2" y="261" width="54.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1077.21" y="271.5" >runti..</text>
</g>
<g >
<title>runtime.preemptall (6 samples, 0.04%)</title><rect x="1187.6" y="213" width="0.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1190.64" y="223.5" ></text>
</g>
<g >
<title>main.SplitParse (2,090 samples, 13.96%)</title><rect x="745.7" y="245" width="164.7" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="748.67" y="255.5" >main.SplitParse</text>
</g>
<g >
<title>runtime.gcmarknewobject (11 samples, 0.07%)</title><rect x="922.0" y="213" width="0.9" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="925.00" y="223.5" ></text>
</g>
<g >
<title>syscall.SyscallN (23 samples, 0.15%)</title><rect x="1072.3" y="133" width="1.8" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1075.32" y="143.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).free (4 samples, 0.03%)</title><rect x="1038.1" y="165" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1041.11" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall7 (3 samples, 0.02%)</title><rect x="1187.4" y="165" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1190.40" y="175.5" ></text>
</g>
<g >
<title>runtime.mapassign_fast32 (3 samples, 0.02%)</title><rect x="545.2" y="245" width="0.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="548.22" y="255.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (3 samples, 0.02%)</title><rect x="1157.9" y="197" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1160.92" y="207.5" ></text>
</g>
<g >
<title>main.MergeOutput (5 samples, 0.03%)</title><rect x="1071.8" y="229" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1074.84" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (146 samples, 0.98%)</title><rect x="1144.7" y="245" width="11.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1147.68" y="255.5" ></text>
</g>
<g >
<title>internal/bytealg.IndexByte (141 samples, 0.94%)</title><rect x="899.2" y="229" width="11.1" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="902.22" y="239.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).writeConsole (23 samples, 0.15%)</title><rect x="1072.3" y="181" width="1.8" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1075.32" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (9 samples, 0.06%)</title><rect x="921.0" y="181" width="0.7" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="923.97" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (142 samples, 0.95%)</title><rect x="1158.2" y="149" width="11.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1161.23" y="159.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (333 samples, 2.22%)</title><rect x="1158.2" y="245" width="26.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1161.23" y="255.5" >r..</text>
</g>
<g >
<title>runtime.gcDrainN (2 samples, 0.01%)</title><rect x="921.7" y="133" width="0.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="924.68" y="143.5" ></text>
</g>
<g >
<title>runtime.send (2 samples, 0.01%)</title><rect x="912.1" y="213" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="915.14" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (2 samples, 0.01%)</title><rect x="1157.9" y="101" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1160.92" y="111.5" ></text>
</g>
<g >
<title>syscall.WriteConsole (23 samples, 0.15%)</title><rect x="1072.3" y="165" width="1.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1075.32" y="175.5" ></text>
</g>
<g >
<title>runtime.semawakeup (6 samples, 0.04%)</title><rect x="1143.8" y="165" width="0.5" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1146.81" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2 (5 samples, 0.03%)</title><rect x="442.0" y="213" width="0.4" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="444.96" y="223.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).push (2 samples, 0.01%)</title><rect x="1037.8" y="213" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1040.79" y="223.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func2 (6 samples, 0.04%)</title><rect x="1187.6" y="245" width="0.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1190.64" y="255.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (5 samples, 0.03%)</title><rect x="1156.2" y="181" width="0.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1159.18" y="191.5" ></text>
</g>
<g >
<title>runtime.ready (2 samples, 0.01%)</title><rect x="442.4" y="165" width="0.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="445.35" y="175.5" ></text>
</g>
<g >
<title>runtime.scanobject (68 samples, 0.45%)</title><rect x="1179.1" y="213" width="5.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1182.12" y="223.5" ></text>
</g>
<g >
<title>runtime.ready (5 samples, 0.03%)</title><rect x="1188.9" y="229" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1191.90" y="239.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (29 samples, 0.19%)</title><rect x="1158.2" y="133" width="2.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1161.23" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (6 samples, 0.04%)</title><rect x="1128.6" y="181" width="0.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1131.60" y="191.5" ></text>
</g>
<g >
<title>runtime.evacuate_fast32 (3 samples, 0.02%)</title><rect x="545.2" y="213" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="548.22" y="223.5" ></text>
</g>
<g >
<title>runtime.findRunnable (25 samples, 0.17%)</title><rect x="1141.6" y="197" width="2.0" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1144.60" y="207.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (161 samples, 1.08%)</title><rect x="975.6" y="213" width="12.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="978.60" y="223.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (6 samples, 0.04%)</title><rect x="1128.6" y="197" width="0.5" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1131.60" y="207.5" ></text>
</g>
<g >
<title>runtime.procyield (3 samples, 0.02%)</title><rect x="1040.0" y="117" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1043.00" y="127.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (160 samples, 1.07%)</title><rect x="975.7" y="165" width="12.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="978.68" y="175.5" ></text>
</g>
<g >
<title>runtime.preemptone (229 samples, 1.53%)</title><rect x="1158.2" y="181" width="18.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1161.23" y="191.5" ></text>
</g>
<g >
<title>runtime.semasleep (26 samples, 0.17%)</title><rect x="1176.3" y="133" width="2.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1179.28" y="143.5" ></text>
</g>
<g >
<title>runtime.typedmemmove (2 samples, 0.01%)</title><rect x="912.3" y="213" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="915.30" y="223.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).find (13 samples, 0.09%)</title><rect x="918.3" y="69" width="1.0" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="921.29" y="79.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (229 samples, 1.53%)</title><rect x="1158.2" y="197" width="18.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1161.23" y="207.5" ></text>
</g>
<g >
<title>runtime.unlock2 (3 samples, 0.02%)</title><rect x="920.2" y="85" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="923.18" y="95.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (5 samples, 0.03%)</title><rect x="1027.1" y="165" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1030.07" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (2 samples, 0.01%)</title><rect x="1076.7" y="165" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1079.73" y="175.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (229 samples, 1.53%)</title><rect x="1158.2" y="213" width="18.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1161.23" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (5 samples, 0.03%)</title><rect x="1027.1" y="181" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1030.07" y="191.5" ></text>
</g>
<g >
<title>runtime.cgocall (23 samples, 0.15%)</title><rect x="1072.3" y="117" width="1.8" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1075.32" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (96 samples, 0.64%)</title><rect x="914.1" y="213" width="7.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="917.11" y="223.5" ></text>
</g>
<g >
<title>runtime.getempty (2 samples, 0.01%)</title><rect x="1069.6" y="149" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1072.64" y="159.5" ></text>
</g>
<g >
<title>runtime.suspendG (36 samples, 0.24%)</title><rect x="1176.3" y="181" width="2.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1179.28" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (4 samples, 0.03%)</title><rect x="1188.6" y="229" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1191.58" y="239.5" ></text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.01%)</title><rect x="1157.9" y="117" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1160.92" y="127.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavengeOne (19 samples, 0.13%)</title><rect x="1156.2" y="229" width="1.5" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1159.18" y="239.5" ></text>
</g>
<g >
<title>runtime.lock2 (3 samples, 0.02%)</title><rect x="1040.0" y="133" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1043.00" y="143.5" ></text>
</g>
<g >
<title>main.Key (1,050 samples, 7.01%)</title><rect x="662.9" y="245" width="82.8" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="665.90" y="255.5" >main.Key</text>
</g>
<g >
<title>all (14,970 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>runtime.semasleep (123 samples, 0.82%)</title><rect x="1131.7" y="197" width="9.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1134.75" y="207.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.01%)</title><rect x="1189.1" y="197" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1192.13" y="207.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (23 samples, 0.15%)</title><rect x="1185.6" y="165" width="1.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1188.59" y="175.5" ></text>
</g>
<g >
<title>runtime.startm (7 samples, 0.05%)</title><rect x="1143.7" y="197" width="0.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1146.73" y="207.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).alloc (19 samples, 0.13%)</title><rect x="917.8" y="85" width="1.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="920.82" y="95.5" ></text>
</g>
<g >
<title>runtime.preemptall (40 samples, 0.27%)</title><rect x="1184.5" y="213" width="3.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1187.48" y="223.5" ></text>
</g>
<g >
<title>runtime.schedule (686 samples, 4.58%)</title><rect x="1074.4" y="229" width="54.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1077.36" y="239.5" >runti..</text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (161 samples, 1.08%)</title><rect x="975.6" y="181" width="12.7" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="978.60" y="191.5" ></text>
</g>
<g >
<title>runtime.procyield (34 samples, 0.23%)</title><rect x="1129.1" y="197" width="2.6" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1132.07" y="207.5" ></text>
</g>
<g >
<title>main.ParseBlocks.func1.1 (5,618 samples, 37.53%)</title><rect x="545.5" y="261" width="442.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="548.45" y="271.5" >main.ParseBlocks.func1.1</text>
</g>
<g >
<title>gogo (2 samples, 0.01%)</title><rect x="10.0" y="261" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>runtime.semasleep (113 samples, 0.75%)</title><rect x="1160.5" y="133" width="8.9" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1163.52" y="143.5" ></text>
</g>
<g >
<title>runtime.morestack (201 samples, 1.34%)</title><rect x="1128.4" y="261" width="15.9" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1131.44" y="271.5" ></text>
</g>
<g >
<title>runtime.greyobject (68 samples, 0.45%)</title><rect x="1179.1" y="197" width="5.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1182.12" y="207.5" ></text>
</g>
<g >
<title>runtime.osPreemptExtEnter.osyield.func1 (4 samples, 0.03%)</title><rect x="1188.6" y="245" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1191.58" y="255.5" ></text>
</g>
<g >
<title>runtime.typedmemmove (4 samples, 0.03%)</title><rect x="442.7" y="213" width="0.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="445.67" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (26 samples, 0.17%)</title><rect x="1176.3" y="117" width="2.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1179.28" y="127.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (2 samples, 0.01%)</title><rect x="921.7" y="197" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="924.68" y="207.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (12 samples, 0.08%)</title><rect x="1037.6" y="229" width="0.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1040.55" y="239.5" ></text>
</g>
<g >
<title>runtime.findObject (90 samples, 0.60%)</title><rect x="1054.3" y="181" width="7.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1057.34" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).findRunnableGCWorker (2 samples, 0.01%)</title><rect x="1141.9" y="181" width="0.2" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1144.92" y="191.5" ></text>
</g>
<g >
<title>syscall.Syscall6 (4 samples, 0.03%)</title><rect x="988.4" y="181" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="991.45" y="191.5" ></text>
</g>
<g >
<title>runtime.main (30 samples, 0.20%)</title><rect x="1071.8" y="261" width="2.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1074.84" y="271.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (8 samples, 0.05%)</title><rect x="1189.3" y="245" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1192.29" y="255.5" ></text>
</g>
<g >
<title>runtime.(*scavengeIndex).alloc (2 samples, 0.01%)</title><rect x="919.4" y="69" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="922.40" y="79.5" ></text>
</g>
<g >
<title>runtime.cgocall (485 samples, 3.24%)</title><rect x="988.8" y="165" width="38.3" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="991.84" y="175.5" >run..</text>
</g>
<g >
<title>runtime.lock2 (3 samples, 0.02%)</title><rect x="1188.9" y="197" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1191.90" y="207.5" ></text>
</g>
<g >
<title>runtime.unlock2 (4 samples, 0.03%)</title><rect x="443.0" y="213" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="445.98" y="223.5" ></text>
</g>
<g >
<title>main.PrintOutput (25 samples, 0.17%)</title><rect x="1072.2" y="229" width="2.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1075.24" y="239.5" ></text>
</g>
<g >
<title>runtime.lock2 (5 samples, 0.03%)</title><rect x="1156.2" y="213" width="0.4" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1159.18" y="223.5" ></text>
</g>
<g >
<title>runtime.semawakeup (3 samples, 0.02%)</title><rect x="1176.0" y="133" width="0.3" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1179.05" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (7 samples, 0.05%)</title><rect x="1178.5" y="149" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1181.49" y="159.5" ></text>
</g>
<g >
<title>runtime.lock2 (26 samples, 0.17%)</title><rect x="1176.3" y="149" width="2.0" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1179.28" y="159.5" ></text>
</g>
<g >
<title>runtime.lock2 (2 samples, 0.01%)</title><rect x="1157.8" y="229" width="0.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1160.76" y="239.5" ></text>
</g>
<g >
<title>runtime.park_m (686 samples, 4.58%)</title><rect x="1074.4" y="245" width="54.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1077.36" y="255.5" >runti..</text>
</g>
<g >
<title>runtime.preemptone (68 samples, 0.45%)</title><rect x="1179.1" y="149" width="5.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1182.12" y="159.5" ></text>
</g>
<g >
<title>runtime.wakep (7 samples, 0.05%)</title><rect x="1143.7" y="213" width="0.6" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1146.73" y="223.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (36 samples, 0.24%)</title><rect x="1176.3" y="197" width="2.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1179.28" y="207.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (15 samples, 0.10%)</title><rect x="1183.1" y="117" width="1.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1186.14" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (69 samples, 0.46%)</title><rect x="915.0" y="165" width="5.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="917.98" y="175.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).put (5 samples, 0.03%)</title><rect x="1069.6" y="165" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1072.64" y="175.5" ></text>
</g>
<g >
<title>bytes.Index (548 samples, 3.66%)</title><rect x="619.7" y="245" width="43.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="622.71" y="255.5" >byte..</text>
</g>
<g >
<title>runtime.scanobject (390 samples, 2.61%)</title><rect x="1040.5" y="197" width="30.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1043.47" y="207.5" >ru..</text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (67 samples, 0.45%)</title><rect x="915.1" y="101" width="5.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="918.14" y="111.5" ></text>
</g>
<g >
<title>runtime.preemptM (40 samples, 0.27%)</title><rect x="1184.5" y="181" width="3.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1187.48" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).nextSpanForSweep (4 samples, 0.03%)</title><rect x="1037.2" y="229" width="0.4" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1040.24" y="239.5" ></text>
</g>
<g >
<title>runtime.memhash32 (77 samples, 0.51%)</title><rect x="539.1" y="229" width="6.0" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="542.07" y="239.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (7 samples, 0.05%)</title><rect x="441.2" y="245" width="0.6" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="444.25" y="255.5" ></text>
</g>
<g >
<title>runtime.stdcall4 (25 samples, 0.17%)</title><rect x="1154.1" y="197" width="2.0" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1157.13" y="207.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func3 (6 samples, 0.04%)</title><rect x="1038.0" y="197" width="0.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1041.03" y="207.5" ></text>
</g>
<g >
<title>runtime.gcDrain (333 samples, 2.22%)</title><rect x="1158.2" y="229" width="26.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1161.23" y="239.5" >r..</text>
</g>
<g >
<title>syscall.Syscall6 (23 samples, 0.15%)</title><rect x="1072.3" y="149" width="1.8" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1075.32" y="159.5" ></text>
</g>
<g >
<title>runtime.mallocgc (471 samples, 3.15%)</title><rect x="912.7" y="229" width="37.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="915.70" y="239.5" >run..</text>
</g>
<g >
<title>runtime.preemptM (3 samples, 0.02%)</title><rect x="1157.9" y="149" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1160.92" y="159.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (3 samples, 0.02%)</title><rect x="1157.9" y="181" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1160.92" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (123 samples, 0.82%)</title><rect x="1131.7" y="181" width="9.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1134.75" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcache).allocLarge (6 samples, 0.04%)</title><rect x="1027.1" y="213" width="0.4" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1030.07" y="223.5" ></text>
</g>
<g >
<title>runtime.wakep (5 samples, 0.03%)</title><rect x="1188.9" y="213" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1191.90" y="223.5" ></text>
</g>
<g >
<title>syscall.SyscallN (485 samples, 3.24%)</title><rect x="988.8" y="181" width="38.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="991.84" y="191.5" >sys..</text>
</g>
<g >
<title>runtime.lock2 (164 samples, 1.10%)</title><rect x="1128.5" y="213" width="12.9" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1131.52" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfUnchecked (60 samples, 0.40%)</title><rect x="1049.6" y="181" width="4.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1052.61" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (4 samples, 0.03%)</title><rect x="1187.8" y="165" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1190.79" y="175.5" ></text>
</g>
<g >
<title>main.ReadFile.func1 (604 samples, 4.03%)</title><rect x="988.3" y="261" width="47.6" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="991.29" y="271.5" >main..</text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (5 samples, 0.03%)</title><rect x="1156.2" y="197" width="0.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1159.18" y="207.5" ></text>
</g>
<g >
<title>runtime.preemptM (68 samples, 0.45%)</title><rect x="1179.1" y="133" width="5.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1182.12" y="143.5" ></text>
</g>
<g >
<title>runtime.checkTimers (7 samples, 0.05%)</title><rect x="1079.5" y="181" width="0.5" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="1082.49" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (29 samples, 0.19%)</title><rect x="1158.2" y="117" width="2.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1161.23" y="127.5" ></text>
</g>
<g >
<title>runtime.bulkBarrierPreWrite (465 samples, 3.11%)</title><rect x="951.6" y="229" width="36.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="954.64" y="239.5" >run..</text>
</g>
<g >
<title>runtime.stdcall1 (3 samples, 0.02%)</title><rect x="1176.0" y="117" width="0.3" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1179.05" y="127.5" ></text>
</g>
<g >
<title>runtime.sysUsedOS (25 samples, 0.17%)</title><rect x="1154.1" y="213" width="2.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1157.13" y="223.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).pop (4 samples, 0.03%)</title><rect x="1037.2" y="213" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1040.24" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (11 samples, 0.07%)</title><rect x="1126.9" y="149" width="0.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1129.94" y="159.5" ></text>
</g>
<g >
<title>runtime.unlock2 (3 samples, 0.02%)</title><rect x="1176.0" y="149" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1179.05" y="159.5" ></text>
</g>
<g >
<title>syscall.readFile (486 samples, 3.25%)</title><rect x="988.8" y="213" width="38.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="991.76" y="223.5" >sys..</text>
</g>
<g >
<title>runtime.stdcall2 (4 samples, 0.03%)</title><rect x="1076.3" y="165" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1079.26" y="175.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.01%)</title><rect x="1189.1" y="181" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1192.13" y="191.5" ></text>
</g>
<g >
<title>runtime.procyield (7 samples, 0.05%)</title><rect x="919.6" y="69" width="0.6" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="922.63" y="79.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (21 samples, 0.14%)</title><rect x="1076.9" y="149" width="1.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1079.89" y="159.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (3 samples, 0.02%)</title><rect x="917.9" y="53" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="920.90" y="63.5" ></text>
</g>
<g >
<title>runtime.lock2 (2 samples, 0.01%)</title><rect x="1184.5" y="165" width="0.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1187.48" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (94 samples, 0.63%)</title><rect x="914.3" y="197" width="7.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="917.27" y="207.5" ></text>
</g>
<g >
<title>runtime.markroot (36 samples, 0.24%)</title><rect x="1176.3" y="213" width="2.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1179.28" y="223.5" ></text>
</g>
<g >
<title>runtime.gcDrain (422 samples, 2.82%)</title><rect x="1038.6" y="213" width="33.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1041.58" y="223.5" >ru..</text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.01%)</title><rect x="921.7" y="181" width="0.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="924.68" y="191.5" ></text>
</g>
<g >
<title>runtime.runqsteal (591 samples, 3.95%)</title><rect x="1080.0" y="181" width="46.6" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1083.04" y="191.5" >runt..</text>
</g>
<g >
<title>runtime.(*lfstack).push (3 samples, 0.02%)</title><rect x="1069.8" y="133" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1072.79" y="143.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (423 samples, 2.83%)</title><rect x="1038.5" y="261" width="33.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1041.50" y="271.5" >ru..</text>
</g>
<g >
<title>runtime.runqgrab.osyield.func1 (586 samples, 3.91%)</title><rect x="1080.4" y="149" width="46.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1083.43" y="159.5" >runt..</text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (4 samples, 0.03%)</title><rect x="920.6" y="165" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="923.58" y="175.5" ></text>
</g>
<g >
<title>runtime.heapSetType (12 samples, 0.08%)</title><rect x="922.9" y="213" width="0.9" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="925.86" y="223.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (2 samples, 0.01%)</title><rect x="1142.2" y="149" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1145.23" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (2 samples, 0.01%)</title><rect x="1184.5" y="133" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1187.48" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (17 samples, 0.11%)</title><rect x="1074.8" y="149" width="1.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1077.84" y="159.5" ></text>
</g>
<g >
<title>runtime.preemptM (36 samples, 0.24%)</title><rect x="1176.3" y="165" width="2.8" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1179.28" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (69 samples, 0.46%)</title><rect x="915.0" y="149" width="5.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="917.98" y="159.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (8 samples, 0.05%)</title><rect x="1071.2" y="165" width="0.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1074.21" y="175.5" ></text>
</g>
<g >
<title>runtime.(*scavengeIndex).alloc (2 samples, 0.01%)</title><rect x="918.1" y="53" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="921.13" y="63.5" ></text>
</g>
<g >
<title>runtime.preemptone (6 samples, 0.04%)</title><rect x="1187.6" y="197" width="0.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1190.64" y="207.5" ></text>
</g>
<g >
<title>syscall.SyscallN (4 samples, 0.03%)</title><rect x="988.4" y="165" width="0.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="991.45" y="175.5" ></text>
</g>
<g >
<title>runtime.preemptM (2 samples, 0.01%)</title><rect x="1188.1" y="181" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1191.11" y="191.5" ></text>
</g>
<g >
<title>runtime.recv.goready.func1 (2 samples, 0.01%)</title><rect x="442.4" y="181" width="0.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="445.35" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (2 samples, 0.01%)</title><rect x="1027.2" y="133" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1030.23" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (2 samples, 0.01%)</title><rect x="1076.7" y="149" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1079.73" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (4 samples, 0.03%)</title><rect x="1188.3" y="229" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1191.27" y="239.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (330 samples, 2.20%)</title><rect x="923.8" y="213" width="26.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="926.81" y="223.5" >r..</text>
</g>
<g >
<title>runtime.gopark (3 samples, 0.02%)</title><rect x="910.9" y="213" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="913.88" y="223.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (8 samples, 0.05%)</title><rect x="1071.2" y="181" width="0.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1074.21" y="191.5" ></text>
</g>
<g >
<title>runtime.sweepone (32 samples, 0.21%)</title><rect x="1036.0" y="245" width="2.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1038.98" y="255.5" ></text>
</g>
<g >
<title>main.main (30 samples, 0.20%)</title><rect x="1071.8" y="245" width="2.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1074.84" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (68 samples, 0.45%)</title><rect x="915.1" y="117" width="5.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="918.06" y="127.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (4 samples, 0.03%)</title><rect x="1157.9" y="229" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1160.92" y="239.5" ></text>
</g>
<g >
<title>runtime.stealWork (609 samples, 4.07%)</title><rect x="1078.6" y="197" width="48.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1081.62" y="207.5" >runt..</text>
</g>
<g >
<title>runtime.stdcall1 (12 samples, 0.08%)</title><rect x="1184.6" y="165" width="1.0" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1187.64" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (113 samples, 0.75%)</title><rect x="1160.5" y="117" width="8.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1163.52" y="127.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (2 samples, 0.01%)</title><rect x="921.7" y="165" width="0.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="924.68" y="175.5" ></text>
</g>
<g >
<title>runtime.semasleep (11 samples, 0.07%)</title><rect x="1126.9" y="165" width="0.9" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1129.94" y="175.5" ></text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (6 samples, 0.04%)</title><rect x="1187.6" y="229" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1190.64" y="239.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (105 samples, 0.70%)</title><rect x="1027.6" y="197" width="8.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1030.62" y="207.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (24 samples, 0.16%)</title><rect x="1169.4" y="149" width="1.9" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1172.43" y="159.5" ></text>
</g>
<g >
<title>runtime.runqsteal (12 samples, 0.08%)</title><rect x="1142.5" y="165" width="1.0" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1145.55" y="175.5" ></text>
</g>
<g >
<title>runtime.preemptone (40 samples, 0.27%)</title><rect x="1184.5" y="197" width="3.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1187.48" y="207.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (2 samples, 0.01%)</title><rect x="1157.8" y="197" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1160.76" y="207.5" ></text>
</g>
<g >
<title>runtime.casgstatus (2 samples, 0.01%)</title><rect x="442.4" y="149" width="0.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="445.35" y="159.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (422 samples, 2.82%)</title><rect x="1038.6" y="229" width="33.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1041.58" y="239.5" >ru..</text>
</g>
<g >
<title>runtime.stdcall1 (5 samples, 0.03%)</title><rect x="1182.7" y="117" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1185.75" y="127.5" ></text>
</g>
<g >
<title>runtime.sysUnusedOS (14 samples, 0.09%)</title><rect x="1156.6" y="213" width="1.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1159.58" y="223.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).update (4 samples, 0.03%)</title><rect x="914.7" y="181" width="0.3" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="917.67" y="191.5" ></text>
</g>
<g >
<title>indexbytebody (345 samples, 2.30%)</title><rect x="631.5" y="229" width="27.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="634.53" y="239.5" >i..</text>
</g>
<g >
<title>runtime.mapaccess2_fast32 (1,293 samples, 8.64%)</title><rect x="443.3" y="245" width="101.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="446.30" y="255.5" >runtime.mapa..</text>
</g>
<g >
<title>runtime.preemptM (229 samples, 1.53%)</title><rect x="1158.2" y="165" width="18.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1161.23" y="175.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointersChunked (106 samples, 0.71%)</title><rect x="1027.5" y="213" width="8.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1030.54" y="223.5" ></text>
</g>
<g >
<title>runtime.recv.goready.func1 (5 samples, 0.03%)</title><rect x="1188.9" y="245" width="0.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1191.90" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (5 samples, 0.03%)</title><rect x="1027.1" y="149" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1030.07" y="159.5" ></text>
</g>
<g >
<title>runtime.mallocgc (112 samples, 0.75%)</title><rect x="1027.1" y="229" width="8.8" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1030.07" y="239.5" ></text>
</g>
<g >
<title>runtime.putfull (3 samples, 0.02%)</title><rect x="1069.8" y="149" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1072.79" y="159.5" ></text>
</g>
<g >
<title>runtime.forEachPInternal (40 samples, 0.27%)</title><rect x="1184.5" y="229" width="3.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1187.48" y="239.5" ></text>
</g>
<g >
<title>runtime.checkTimers (2 samples, 0.01%)</title><rect x="1074.7" y="197" width="0.1" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="1077.68" y="207.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).allocRange (5 samples, 0.03%)</title><rect x="917.9" y="69" width="0.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="920.90" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mspan).heapBitsSmallForAddr (55 samples, 0.37%)</title><rect x="1050.0" y="165" width="4.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1053.01" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2 (7 samples, 0.05%)</title><rect x="919.6" y="85" width="0.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="922.63" y="95.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (2 samples, 0.01%)</title><rect x="1187.6" y="165" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1190.64" y="175.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (23 samples, 0.15%)</title><rect x="1072.3" y="197" width="1.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1075.32" y="207.5" ></text>
</g>
<g >
<title>runtime.findRunnable (664 samples, 4.44%)</title><rect x="1074.4" y="213" width="52.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1077.44" y="223.5" >runti..</text>
</g>
<g >
<title>runtime.lock2 (2 samples, 0.01%)</title><rect x="1157.9" y="133" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1160.92" y="143.5" ></text>
</g>
<g >
<title>runtime.notewakeup (8 samples, 0.05%)</title><rect x="1127.8" y="165" width="0.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1130.81" y="175.5" ></text>
</g>
<g >
<title>runtime.greyobject (109 samples, 0.73%)</title><rect x="1061.4" y="181" width="8.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1064.44" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (6 samples, 0.04%)</title><rect x="1039.8" y="197" width="0.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1042.84" y="207.5" ></text>
</g>
<g >
<title>runtime.wakep (21 samples, 0.14%)</title><rect x="1126.8" y="197" width="1.6" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1129.78" y="207.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (6 samples, 0.04%)</title><rect x="1143.8" y="149" width="0.5" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1146.81" y="159.5" ></text>
</g>
<g >
<title>runtime.notewakeup (6 samples, 0.04%)</title><rect x="1143.8" y="181" width="0.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1146.81" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (5 samples, 0.03%)</title><rect x="1027.1" y="197" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1030.07" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (12 samples, 0.08%)</title><rect x="916.9" y="85" width="0.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="919.87" y="95.5" ></text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (2 samples, 0.01%)</title><rect x="1188.1" y="229" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1191.11" y="239.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (3 samples, 0.02%)</title><rect x="1142.2" y="181" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1145.23" y="191.5" ></text>
</g>
<g >
<title>runtime.gcstopm (17 samples, 0.11%)</title><rect x="1074.8" y="197" width="1.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1077.84" y="207.5" ></text>
</g>
<g >
<title>runtime.stealWork (13 samples, 0.09%)</title><rect x="1142.5" y="181" width="1.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1145.47" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (13 samples, 0.09%)</title><rect x="1126.8" y="181" width="1.0" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1129.78" y="191.5" ></text>
</g>
<g >
<title>os.(*File).Write (23 samples, 0.15%)</title><rect x="1072.3" y="213" width="1.8" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1075.32" y="223.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).push (8 samples, 0.05%)</title><rect x="921.1" y="165" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="924.05" y="175.5" ></text>
</g>
<g >
<title>runtime.semasleep (44 samples, 0.29%)</title><rect x="1150.7" y="197" width="3.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1153.67" y="207.5" ></text>
</g>
<g >
<title>runtime.findObject (2 samples, 0.01%)</title><rect x="1142.2" y="133" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1145.23" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (580 samples, 3.87%)</title><rect x="1144.3" y="261" width="45.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1147.28" y="271.5" >runt..</text>
</g>
<g >
<title>runtime.stdcall0 (3 samples, 0.02%)</title><rect x="1179.1" y="85" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1182.12" y="95.5" ></text>
</g>
<g >
<title>runtime.makeslice (471 samples, 3.15%)</title><rect x="912.7" y="245" width="37.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="915.70" y="255.5" >run..</text>
</g>
<g >
<title>runtime.(*pageAlloc).update (3 samples, 0.02%)</title><rect x="1038.1" y="149" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1041.11" y="159.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (4 samples, 0.03%)</title><rect x="1039.9" y="181" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1042.92" y="191.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (2 samples, 0.01%)</title><rect x="921.7" y="213" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="924.68" y="223.5" ></text>
</g>
<g >
<title>runtime.cgocall (4 samples, 0.03%)</title><rect x="988.4" y="149" width="0.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="991.45" y="159.5" ></text>
</g>
<g >
<title>runtime.lock2 (17 samples, 0.11%)</title><rect x="1074.8" y="181" width="1.4" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1077.84" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (13 samples, 0.09%)</title><rect x="911.1" y="213" width="1.0" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="914.12" y="223.5" ></text>
</g>
<g >
<title>runtime.bulkBarrierPreWrite (2 samples, 0.01%)</title><rect x="442.7" y="197" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="445.75" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.01%)</title><rect x="442.4" y="197" width="0.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="445.35" y="207.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.forEachP.func5 (40 samples, 0.27%)</title><rect x="1184.5" y="245" width="3.1" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1187.48" y="255.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (586 samples, 3.91%)</title><rect x="1080.4" y="133" width="46.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1083.43" y="143.5" >runt..</text>
</g>
<g >
<title>runtime.stdcall3 (14 samples, 0.09%)</title><rect x="1156.6" y="197" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1159.58" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.01%)</title><rect x="1184.5" y="149" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1187.48" y="159.5" ></text>
</g>
<g >
<title>runtime.makeslice (112 samples, 0.75%)</title><rect x="1027.1" y="245" width="8.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1030.07" y="255.5" ></text>
</g>
</g>
</svg>
