<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>runtime.gopark (2 samples, 0.02%)</title><rect x="984.0" y="181" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="987.02" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (104 samples, 0.78%)</title><rect x="1170.3" y="181" width="9.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1173.34" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (85 samples, 0.64%)</title><rect x="1001.3" y="165" width="7.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1004.29" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (6 samples, 0.05%)</title><rect x="1184.5" y="117" width="0.5" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1187.51" y="127.5" ></text>
</g>
<g >
<title>gonum.org/v1/plot.(*Plot).Save (6 samples, 0.05%)</title><rect x="1143.2" y="165" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1146.24" y="175.5" ></text>
</g>
<g >
<title>runtime.findObject (106 samples, 0.80%)</title><rect x="1072.3" y="149" width="9.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1075.31" y="159.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (4 samples, 0.03%)</title><rect x="1005.5" y="117" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1008.45" y="127.5" ></text>
</g>
<g >
<title>runtime.add (6 samples, 0.05%)</title><rect x="1144.7" y="181" width="0.6" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1147.75" y="191.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (110 samples, 0.83%)</title><rect x="1170.3" y="197" width="9.8" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1173.34" y="207.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (15 samples, 0.11%)</title><rect x="567.0" y="213" width="1.3" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="570.01" y="223.5" ></text>
</g>
<g >
<title>main.PrintOutput (3 samples, 0.02%)</title><rect x="1157.1" y="197" width="0.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1160.15" y="207.5" ></text>
</g>
<g >
<title>runtime.sysUsedOS (6 samples, 0.05%)</title><rect x="1180.5" y="181" width="0.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1183.52" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (106 samples, 0.80%)</title><rect x="1180.3" y="229" width="9.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1183.26" y="239.5" ></text>
</g>
<g >
<title>runtime.spanOf (4 samples, 0.03%)</title><rect x="1156.7" y="85" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1159.70" y="95.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (6 samples, 0.05%)</title><rect x="698.4" y="197" width="0.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="701.43" y="207.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (85 samples, 0.64%)</title><rect x="1001.3" y="181" width="7.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1004.29" y="191.5" ></text>
</g>
<g >
<title>runtime.schedule (86 samples, 0.65%)</title><rect x="1160.0" y="181" width="7.6" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1162.98" y="191.5" ></text>
</g>
<g >
<title>runtime.chansend (3 samples, 0.02%)</title><rect x="1035.9" y="197" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1038.91" y="207.5" ></text>
</g>
<g >
<title>runtime.scanobject (3 samples, 0.02%)</title><rect x="1187.5" y="181" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1190.52" y="191.5" ></text>
</g>
<g >
<title>runtime.semasleep (8 samples, 0.06%)</title><rect x="1186.6" y="101" width="0.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1189.63" y="111.5" ></text>
</g>
<g >
<title>runtime.findObject (19 samples, 0.14%)</title><rect x="1005.8" y="117" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1008.80" y="127.5" ></text>
</g>
<g >
<title>runtime.addb (2 samples, 0.02%)</title><rect x="1070.1" y="149" width="0.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1073.10" y="159.5" ></text>
</g>
<g >
<title>fmt.Sprintf (3 samples, 0.02%)</title><rect x="982.7" y="213" width="0.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="985.69" y="223.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (19 samples, 0.14%)</title><rect x="1070.6" y="149" width="1.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1073.63" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (6 samples, 0.05%)</title><rect x="984.2" y="165" width="0.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="987.20" y="175.5" ></text>
</g>
<g >
<title>runtime.mapassign_fast64 (2 samples, 0.02%)</title><rect x="705.1" y="213" width="0.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="708.07" y="223.5" ></text>
</g>
<g >
<title>runtime.runqget (10 samples, 0.08%)</title><rect x="1166.5" y="165" width="0.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1169.53" y="175.5" ></text>
</g>
<g >
<title>runtime/pprof.(*profileBuilder).addCPUData (3 samples, 0.02%)</title><rect x="1189.6" y="213" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1192.65" y="223.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (5 samples, 0.04%)</title><rect x="1157.6" y="197" width="0.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1160.59" y="207.5" ></text>
</g>
<g >
<title>runtime.preemptall (12 samples, 0.09%)</title><rect x="1187.8" y="181" width="1.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1190.79" y="191.5" ></text>
</g>
<g >
<title>runtime.notewakeup (28 samples, 0.21%)</title><rect x="1167.8" y="149" width="2.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1170.77" y="159.5" ></text>
</g>
<g >
<title>runtime.preemptall (7 samples, 0.05%)</title><rect x="1188.8" y="181" width="0.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1191.85" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).put (3 samples, 0.02%)</title><rect x="1187.5" y="149" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1190.52" y="159.5" ></text>
</g>
<g >
<title>runtime.(*gcBits).bitp (2 samples, 0.02%)</title><rect x="1069.1" y="149" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1072.12" y="159.5" ></text>
</g>
<g >
<title>runtime.puintptr.ptr (2 samples, 0.02%)</title><rect x="1033.0" y="197" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1035.99" y="207.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (10 samples, 0.08%)</title><rect x="1183.6" y="101" width="0.9" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1186.62" y="111.5" ></text>
</g>
<g >
<title>compress/flate.(*compressor).findMatch (2 samples, 0.02%)</title><rect x="1143.6" y="37" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1146.60" y="47.5" ></text>
</g>
<g >
<title>runtime.(*gcCPULimiterState).update (6 samples, 0.05%)</title><rect x="1164.3" y="133" width="0.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1167.32" y="143.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (117 samples, 0.88%)</title><rect x="1160.0" y="197" width="10.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1162.98" y="207.5" ></text>
</g>
<g >
<title>runtime.chansend (3 samples, 0.02%)</title><rect x="983.9" y="197" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="986.93" y="207.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (39 samples, 0.29%)</title><rect x="1107.8" y="149" width="3.5" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1110.82" y="159.5" ></text>
</g>
<g >
<title>runtime.startm (30 samples, 0.23%)</title><rect x="1167.6" y="165" width="2.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1170.60" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (6 samples, 0.05%)</title><rect x="984.2" y="117" width="0.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="987.20" y="127.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (3 samples, 0.02%)</title><rect x="1187.5" y="101" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1190.52" y="111.5" ></text>
</g>
<g >
<title>image/png.Encode (3 samples, 0.02%)</title><rect x="1143.5" y="149" width="0.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1146.51" y="159.5" ></text>
</g>
<g >
<title>git.sr.ht/~sbinet/gg.(*Context).Stroke (2 samples, 0.02%)</title><rect x="1143.2" y="53" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1146.24" y="63.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (228 samples, 1.71%)</title><rect x="1160.0" y="213" width="20.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1162.98" y="223.5" ></text>
</g>
<g >
<title>runtime.(*bmap).keys (5 samples, 0.04%)</title><rect x="563.4" y="213" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="566.38" y="223.5" ></text>
</g>
<g >
<title>runtime.makeslice (147 samples, 1.10%)</title><rect x="984.2" y="213" width="13.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="987.20" y="223.5" ></text>
</g>
<g >
<title>main.ParseBlocks.func1.1 (3,728 samples, 27.98%)</title><rect x="705.5" y="229" width="330.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="708.51" y="239.5" >main.ParseBlocks.func1.1</text>
</g>
<g >
<title>gonum.org/v1/plot.(*Plot).WriterTo (3 samples, 0.02%)</title><rect x="1143.2" y="149" width="0.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1146.24" y="159.5" ></text>
</g>
<g >
<title>runtime.bucketShift (8 samples, 0.06%)</title><rect x="570.8" y="213" width="0.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="573.82" y="223.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (3 samples, 0.02%)</title><rect x="984.7" y="101" width="0.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="987.73" y="111.5" ></text>
</g>
<g >
<title>gcWriteBarrier (32 samples, 0.24%)</title><rect x="1154.2" y="165" width="2.9" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1157.22" y="175.5" ></text>
</g>
<g >
<title>runtime.memhash64 (6 samples, 0.05%)</title><rect x="1151.7" y="165" width="0.6" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1154.74" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfUnchecked (3 samples, 0.02%)</title><rect x="1069.8" y="149" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1072.83" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (2 samples, 0.02%)</title><rect x="1187.9" y="133" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1190.87" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (7 samples, 0.05%)</title><rect x="1180.4" y="213" width="0.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1183.44" y="223.5" ></text>
</g>
<g >
<title>runtime.scanobject (3 samples, 0.02%)</title><rect x="984.7" y="85" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="987.73" y="95.5" ></text>
</g>
<g >
<title>runtime.park_m (18 samples, 0.14%)</title><rect x="1158.1" y="213" width="1.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1161.12" y="223.5" ></text>
</g>
<g >
<title>runtime.osyield (6 samples, 0.05%)</title><rect x="1179.6" y="181" width="0.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1182.55" y="191.5" ></text>
</g>
<g >
<title>runtime.scanobject (831 samples, 6.24%)</title><rect x="1037.7" y="165" width="73.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1040.68" y="175.5" >runtime...</text>
</g>
<g >
<title>runtime.stdcall7 (2 samples, 0.02%)</title><rect x="1186.5" y="117" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1189.46" y="127.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (866 samples, 6.50%)</title><rect x="1036.8" y="197" width="76.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1039.80" y="207.5" >runtime...</text>
</g>
<g >
<title>runtime.preemptM (24 samples, 0.18%)</title><rect x="1184.5" y="133" width="2.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1187.51" y="143.5" ></text>
</g>
<g >
<title>brc/pkg.(*CityData).Merge (335 samples, 2.51%)</title><rect x="1113.6" y="197" width="29.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1116.58" y="207.5" >br..</text>
</g>
<g >
<title>gonum.org/v1/plot.(*Plot).Draw (3 samples, 0.02%)</title><rect x="1143.2" y="133" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1146.24" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mspan).heapBitsSmallForAddr (2 samples, 0.02%)</title><rect x="1069.9" y="133" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1072.92" y="143.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt2 (2 samples, 0.02%)</title><rect x="568.2" y="197" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="571.16" y="207.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (187 samples, 1.40%)</title><rect x="1091.3" y="149" width="16.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1094.26" y="159.5" ></text>
</g>
<g >
<title>runtime.preemptone (7 samples, 0.05%)</title><rect x="1188.8" y="165" width="0.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1191.85" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (6 samples, 0.05%)</title><rect x="1179.6" y="149" width="0.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1182.55" y="159.5" ></text>
</g>
<g >
<title>runtime.preemptone (3 samples, 0.02%)</title><rect x="1187.5" y="117" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1190.52" y="127.5" ></text>
</g>
<g >
<title>gonum.org/v1/plot/vg/draw.RingGlyph.DrawGlyph (2 samples, 0.02%)</title><rect x="1143.2" y="85" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1146.24" y="95.5" ></text>
</g>
<g >
<title>runtime.spanOf (15 samples, 0.11%)</title><rect x="1007.5" y="117" width="1.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1010.49" y="127.5" ></text>
</g>
<g >
<title>github.com/zeebo/xxh3.readU64 (29 samples, 0.22%)</title><rect x="33.6" y="213" width="2.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="36.56" y="223.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func2 (7 samples, 0.05%)</title><rect x="1188.8" y="213" width="0.7" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1191.85" y="223.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (138 samples, 1.04%)</title><rect x="985.0" y="181" width="12.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="987.99" y="191.5" ></text>
</g>
<g >
<title>gonum.org/v1/plot/plotter.(*Scatter).Plot (2 samples, 0.02%)</title><rect x="1143.2" y="117" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1146.24" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.02%)</title><rect x="984.7" y="149" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="987.73" y="159.5" ></text>
</g>
<g >
<title>brc/pkg.Timings.Report (6 samples, 0.05%)</title><rect x="1143.2" y="197" width="0.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1146.24" y="207.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).findRunnableGCWorker (9 samples, 0.07%)</title><rect x="1164.1" y="149" width="0.8" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1167.14" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (3 samples, 0.02%)</title><rect x="984.4" y="101" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="987.37" y="111.5" ></text>
</g>
<g >
<title>runtime.osyield (10 samples, 0.08%)</title><rect x="1183.6" y="117" width="0.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1186.62" y="127.5" ></text>
</g>
<g >
<title>github.com/zeebo/xxh3.hashAny (180 samples, 1.35%)</title><rect x="14.5" y="213" width="16.0" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="17.52" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (6 samples, 0.05%)</title><rect x="984.2" y="149" width="0.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="987.20" y="159.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (3 samples, 0.02%)</title><rect x="984.7" y="165" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="987.73" y="175.5" ></text>
</g>
<g >
<title>runtime.schedule (4 samples, 0.03%)</title><rect x="30.1" y="165" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="33.10" y="175.5" ></text>
</g>
<g >
<title>runtime.runqsteal (2 samples, 0.02%)</title><rect x="1166.0" y="133" width="0.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1169.00" y="143.5" ></text>
</g>
<g >
<title>runtime.lock2 (29 samples, 0.22%)</title><rect x="1181.1" y="117" width="2.5" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1184.06" y="127.5" ></text>
</g>
<g >
<title>gonum.org/v1/plot/vg/vgimg.(*Canvas).Stroke (2 samples, 0.02%)</title><rect x="1143.2" y="69" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1146.24" y="79.5" ></text>
</g>
<g >
<title>runtime.semawakeup (26 samples, 0.20%)</title><rect x="1167.9" y="133" width="2.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1170.95" y="143.5" ></text>
</g>
<g >
<title>runtime.memhash64 (68 samples, 0.51%)</title><rect x="699.0" y="197" width="6.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="701.96" y="207.5" ></text>
</g>
<g >
<title>github.com/zeebo/xxh3.mulFold64 (27 samples, 0.20%)</title><rect x="30.5" y="213" width="2.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="33.46" y="223.5" ></text>
</g>
<g >
<title>compress/flate.(*compressor).write (2 samples, 0.02%)</title><rect x="1143.6" y="69" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1146.60" y="79.5" ></text>
</g>
<g >
<title>runtime.casgstatus (2 samples, 0.02%)</title><rect x="29.9" y="165" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="32.92" y="175.5" ></text>
</g>
<g >
<title>runtime.spanOf (23 samples, 0.17%)</title><rect x="1033.5" y="197" width="2.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1036.52" y="207.5" ></text>
</g>
<g >
<title>main.MapData.func1.1 (7,349 samples, 55.15%)</title><rect x="54.7" y="229" width="650.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="57.72" y="239.5" >main.MapData.func1.1</text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (3 samples, 0.02%)</title><rect x="984.7" y="117" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="987.73" y="127.5" ></text>
</g>
<g >
<title>main.MergeMaps (151 samples, 1.13%)</title><rect x="1143.8" y="197" width="13.3" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1146.77" y="207.5" ></text>
</g>
<g >
<title>runtime.procyield (22 samples, 0.17%)</title><rect x="1170.4" y="165" width="2.0" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1173.43" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (8 samples, 0.06%)</title><rect x="1188.1" y="133" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1191.05" y="143.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (63 samples, 0.47%)</title><rect x="1181.1" y="181" width="5.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1184.06" y="191.5" ></text>
</g>
<g >
<title>runtime.runqgrab.osyield.func1 (11 samples, 0.08%)</title><rect x="1158.5" y="117" width="0.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1161.47" y="127.5" ></text>
</g>
<g >
<title>runtime.readUintptr (2 samples, 0.02%)</title><rect x="1033.2" y="197" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1036.17" y="207.5" ></text>
</g>
<g >
<title>runtime.preemptone (12 samples, 0.09%)</title><rect x="1187.8" y="165" width="1.0" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1190.79" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2 (8 samples, 0.06%)</title><rect x="1186.6" y="117" width="0.7" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1189.63" y="127.5" ></text>
</g>
<g >
<title>image/png.(*Encoder).Encode (3 samples, 0.02%)</title><rect x="1143.5" y="133" width="0.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1146.51" y="143.5" ></text>
</g>
<g >
<title>github.com/zeebo/xxh3.readU32 (7 samples, 0.05%)</title><rect x="32.9" y="213" width="0.7" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="35.94" y="223.5" ></text>
</g>
<g >
<title>runtime.markroot (10 samples, 0.08%)</title><rect x="1186.6" y="181" width="0.9" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1189.63" y="191.5" ></text>
</g>
<g >
<title>runtime.schedule (4 samples, 0.03%)</title><rect x="698.6" y="165" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="701.61" y="175.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.02%)</title><rect x="705.2" y="197" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="708.25" y="207.5" ></text>
</g>
<g >
<title>image/png.(*encoder).writeIDATs (3 samples, 0.02%)</title><rect x="1143.5" y="117" width="0.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1146.51" y="127.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (6 samples, 0.05%)</title><rect x="698.4" y="181" width="0.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="701.43" y="191.5" ></text>
</g>
<g >
<title>runtime.spanClass.noscan (2 samples, 0.02%)</title><rect x="1033.3" y="197" width="0.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1036.35" y="207.5" ></text>
</g>
<g >
<title>runtime.casgstatus (3 samples, 0.02%)</title><rect x="30.2" y="133" width="0.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="33.19" y="143.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (29 samples, 0.22%)</title><rect x="1154.5" y="117" width="2.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1157.49" y="127.5" ></text>
</g>
<g >
<title>runtime.newobject (2 samples, 0.02%)</title><rect x="705.2" y="213" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="708.25" y="223.5" ></text>
</g>
<g >
<title>runtime.bgsweep (4 samples, 0.03%)</title><rect x="1036.2" y="229" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1039.18" y="239.5" ></text>
</g>
<g >
<title>runtime.sysUsed (6 samples, 0.05%)</title><rect x="1180.5" y="197" width="0.6" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1183.52" y="207.5" ></text>
</g>
<g >
<title>runtime.schedule (2 samples, 0.02%)</title><rect x="1157.4" y="181" width="0.2" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1160.41" y="191.5" ></text>
</g>
<g >
<title>runtime.wbMove (434 samples, 3.26%)</title><rect x="997.2" y="213" width="38.4" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1000.22" y="223.5" >run..</text>
</g>
<g >
<title>runtime.arenaIndex (2 samples, 0.02%)</title><rect x="1155.4" y="85" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1158.37" y="95.5" ></text>
</g>
<g >
<title>runtime.execute (2 samples, 0.02%)</title><rect x="698.6" y="149" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="701.61" y="159.5" ></text>
</g>
<g >
<title>runtime/pprof.(*profMap).lookup (3 samples, 0.02%)</title><rect x="1189.6" y="197" width="0.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1192.65" y="207.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (24 samples, 0.18%)</title><rect x="1154.9" y="101" width="2.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1157.93" y="111.5" ></text>
</g>
<g >
<title>runtime.lock2 (4 samples, 0.03%)</title><rect x="1157.6" y="181" width="0.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1160.59" y="191.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (11 samples, 0.08%)</title><rect x="983.0" y="213" width="0.9" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="985.96" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mspan).markBitsForIndex (3 samples, 0.02%)</title><rect x="1154.7" y="101" width="0.2" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="1157.67" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (6 samples, 0.05%)</title><rect x="1069.3" y="149" width="0.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1072.30" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfType (4 samples, 0.03%)</title><rect x="1000.2" y="197" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1003.23" y="207.5" ></text>
</g>
<g >
<title>runtime.(*wbBuf).get2 (93 samples, 0.70%)</title><rect x="1000.6" y="197" width="8.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1003.58" y="207.5" ></text>
</g>
<g >
<title>runtime.(*gcCPULimiterState).updateLocked (6 samples, 0.05%)</title><rect x="1164.3" y="117" width="0.6" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1167.32" y="127.5" ></text>
</g>
<g >
<title>gonum.org/v1/plot/vg/draw.(*Canvas).DrawGlyph (2 samples, 0.02%)</title><rect x="1143.2" y="101" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1146.24" y="111.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (2 samples, 0.02%)</title><rect x="1157.8" y="149" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1160.77" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (868 samples, 6.51%)</title><rect x="1036.7" y="213" width="76.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1039.71" y="223.5" >runtime...</text>
</g>
<g >
<title>runtime.lock2 (3 samples, 0.02%)</title><rect x="1187.5" y="85" width="0.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1190.52" y="95.5" ></text>
</g>
<g >
<title>git.sr.ht/~sbinet/gg.(*Context).StrokePreserve (2 samples, 0.02%)</title><rect x="1143.2" y="37" width="0.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1146.24" y="47.5" ></text>
</g>
<g >
<title>compress/flate.(*Writer).Write (2 samples, 0.02%)</title><rect x="1143.6" y="85" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1146.60" y="95.5" ></text>
</g>
<g >
<title>image/png.(*encoder).writeImage (3 samples, 0.02%)</title><rect x="1143.5" y="101" width="0.3" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1146.51" y="111.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (16 samples, 0.12%)</title><rect x="1185.0" y="117" width="1.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1188.04" y="127.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (5 samples, 0.04%)</title><rect x="1037.2" y="165" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1040.24" y="175.5" ></text>
</g>
<g >
<title>runtime.gcDrain (76 samples, 0.57%)</title><rect x="1181.1" y="197" width="6.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1184.06" y="207.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (43 samples, 0.32%)</title><rect x="1028.7" y="181" width="3.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1031.74" y="191.5" ></text>
</g>
<g >
<title>runtime.execute (21 samples, 0.16%)</title><rect x="1160.7" y="165" width="1.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1163.69" y="175.5" ></text>
</g>
<g >
<title>runtime.preemptM (2 samples, 0.02%)</title><rect x="1187.3" y="133" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1190.34" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (6 samples, 0.05%)</title><rect x="984.2" y="133" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="987.20" y="143.5" ></text>
</g>
<g >
<title>main.main.func1 (6 samples, 0.05%)</title><rect x="1035.6" y="229" width="0.6" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1038.65" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (7 samples, 0.05%)</title><rect x="999.6" y="197" width="0.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1002.61" y="207.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (6 samples, 0.05%)</title><rect x="29.9" y="197" width="0.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="32.92" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (29 samples, 0.22%)</title><rect x="1181.1" y="101" width="2.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1184.06" y="111.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (10 samples, 0.08%)</title><rect x="1183.6" y="85" width="0.9" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1186.62" y="95.5" ></text>
</g>
<g >
<title>runtime.preemptone (63 samples, 0.47%)</title><rect x="1181.1" y="149" width="5.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1184.06" y="159.5" ></text>
</g>
<g >
<title>runtime.mapaccess2_fast64 (76 samples, 0.57%)</title><rect x="1145.5" y="181" width="6.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1148.55" y="191.5" ></text>
</g>
<g >
<title>runtime.procyield (2 samples, 0.02%)</title><rect x="1166.3" y="133" width="0.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1169.27" y="143.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (8 samples, 0.06%)</title><rect x="1186.6" y="133" width="0.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1189.63" y="143.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (84 samples, 0.63%)</title><rect x="1001.4" y="149" width="7.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1004.38" y="159.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.forEachP.func5 (12 samples, 0.09%)</title><rect x="1187.8" y="213" width="1.0" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1190.79" y="223.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (39 samples, 0.29%)</title><rect x="1181.1" y="133" width="3.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1184.06" y="143.5" ></text>
</g>
<g >
<title>runtime.gcDrain (866 samples, 6.50%)</title><rect x="1036.8" y="181" width="76.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1039.80" y="191.5" >runtime...</text>
</g>
<g >
<title>runtime.deductAssistCredit (3 samples, 0.02%)</title><rect x="984.7" y="181" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="987.73" y="191.5" ></text>
</g>
<g >
<title>runtime/pprof.profileWriter (4 samples, 0.03%)</title><rect x="1189.6" y="229" width="0.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1192.65" y="239.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (63 samples, 0.47%)</title><rect x="1181.1" y="165" width="5.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1184.06" y="175.5" ></text>
</g>
<g >
<title>runtime.mapaccess2_fast64 (1,508 samples, 11.32%)</title><rect x="571.5" y="213" width="133.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="574.53" y="223.5" >runtime.mapacces..</text>
</g>
<g >
<title>runtime.markroot.func1 (10 samples, 0.08%)</title><rect x="1186.6" y="165" width="0.9" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1189.63" y="175.5" ></text>
</g>
<g >
<title>runtime.forEachPInternal (12 samples, 0.09%)</title><rect x="1187.8" y="197" width="1.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1190.79" y="207.5" ></text>
</g>
<g >
<title>runtime.stealWork (2 samples, 0.02%)</title><rect x="1166.0" y="149" width="0.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1169.00" y="159.5" ></text>
</g>
<g >
<title>runtime.add (36 samples, 0.27%)</title><rect x="563.8" y="213" width="3.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="566.83" y="223.5" ></text>
</g>
<g >
<title>github.com/zeebo/xxh3.Hash (505 samples, 3.79%)</title><rect x="10.0" y="229" width="44.7" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >gith..</text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.02%)</title><rect x="1157.8" y="165" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1160.77" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (6 samples, 0.05%)</title><rect x="1179.6" y="165" width="0.5" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1182.55" y="175.5" ></text>
</g>
<g >
<title>runtime.spanOf (98 samples, 0.74%)</title><rect x="1082.5" y="149" width="8.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1085.49" y="159.5" ></text>
</g>
<g >
<title>runtime.arenaIdx.l1 (3 samples, 0.02%)</title><rect x="1070.3" y="149" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1073.27" y="159.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (25 samples, 0.19%)</title><rect x="1111.3" y="165" width="2.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1114.27" y="175.5" ></text>
</g>
<g >
<title>runtime.preemptM (7 samples, 0.05%)</title><rect x="1188.8" y="149" width="0.7" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1191.85" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (11 samples, 0.08%)</title><rect x="1158.5" y="101" width="0.9" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1161.47" y="111.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (3 samples, 0.02%)</title><rect x="1187.5" y="133" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1190.52" y="143.5" ></text>
</g>
<g >
<title>runtime.chansend1 (3 samples, 0.02%)</title><rect x="983.9" y="213" width="0.3" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="986.93" y="223.5" ></text>
</g>
<g >
<title>runtime.main (495 samples, 3.71%)</title><rect x="1113.6" y="229" width="43.8" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1116.58" y="239.5" >runt..</text>
</g>
<g >
<title>runtime.gopreempt_m (7 samples, 0.05%)</title><rect x="1157.4" y="213" width="0.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1160.41" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (81 samples, 0.61%)</title><rect x="1172.4" y="149" width="7.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1175.38" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mSpanStateBox).get (6 samples, 0.05%)</title><rect x="999.1" y="197" width="0.5" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="1002.07" y="207.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (3 samples, 0.02%)</title><rect x="1187.5" y="53" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1190.52" y="63.5" ></text>
</g>
<g >
<title>runtime.runqsteal (13 samples, 0.10%)</title><rect x="1158.4" y="149" width="1.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1161.39" y="159.5" ></text>
</g>
<g >
<title>runtime.execute (4 samples, 0.03%)</title><rect x="30.1" y="149" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="33.10" y="159.5" ></text>
</g>
<g >
<title>runtime.findRunnable (17 samples, 0.13%)</title><rect x="1158.1" y="181" width="1.5" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1161.12" y="191.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (29 samples, 0.22%)</title><rect x="1154.5" y="149" width="2.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1157.49" y="159.5" ></text>
</g>
<g >
<title>brc/pkg.Plot (6 samples, 0.05%)</title><rect x="1143.2" y="181" width="0.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1146.24" y="191.5" ></text>
</g>
<g >
<title>runtime.checkTimers (7 samples, 0.05%)</title><rect x="1165.1" y="149" width="0.6" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="1168.12" y="159.5" ></text>
</g>
<g >
<title>github.com/zeebo/xxh3.xxh3Avalanche (81 samples, 0.61%)</title><rect x="47.4" y="213" width="7.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="50.37" y="223.5" ></text>
</g>
<g >
<title>runtime.casgstatus (2 samples, 0.02%)</title><rect x="698.4" y="165" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="701.43" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (24 samples, 0.18%)</title><rect x="1168.1" y="117" width="2.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1171.13" y="127.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (84 samples, 0.63%)</title><rect x="1001.4" y="133" width="7.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1004.38" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (29 samples, 0.22%)</title><rect x="1154.5" y="133" width="2.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1157.49" y="143.5" ></text>
</g>
<g >
<title>github.com/zeebo/xxh3.rrmxmx (127 samples, 0.95%)</title><rect x="36.1" y="213" width="11.3" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="39.12" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcache).allocLarge (6 samples, 0.05%)</title><rect x="984.2" y="181" width="0.5" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="987.20" y="191.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (2 samples, 0.02%)</title><rect x="1157.4" y="197" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1160.41" y="207.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt2 (2 samples, 0.02%)</title><rect x="983.8" y="197" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="986.75" y="207.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (29 samples, 0.22%)</title><rect x="1181.1" y="85" width="2.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1184.06" y="95.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (3 samples, 0.02%)</title><rect x="1166.3" y="165" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1169.27" y="175.5" ></text>
</g>
<g >
<title>runtime.mallocgc (147 samples, 1.10%)</title><rect x="984.2" y="197" width="13.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="987.20" y="207.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (76 samples, 0.57%)</title><rect x="1181.1" y="213" width="6.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1184.06" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (8 samples, 0.06%)</title><rect x="1186.6" y="85" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1189.63" y="95.5" ></text>
</g>
<g >
<title>runtime.osyield (11 samples, 0.08%)</title><rect x="1158.5" y="133" width="0.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1161.47" y="143.5" ></text>
</g>
<g >
<title>runtime.bucketMask (28 samples, 0.21%)</title><rect x="568.3" y="213" width="2.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="571.34" y="223.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (3 samples, 0.02%)</title><rect x="984.7" y="133" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="987.73" y="143.5" ></text>
</g>
<g >
<title>compress/flate.(*compressor).deflate (2 samples, 0.02%)</title><rect x="1143.6" y="53" width="0.2" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1146.60" y="63.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (2 samples, 0.02%)</title><rect x="35.9" y="197" width="0.2" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="38.95" y="207.5" ></text>
</g>
<g >
<title>runtime.wakep (30 samples, 0.23%)</title><rect x="1167.6" y="181" width="2.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1170.60" y="191.5" ></text>
</g>
<g >
<title>runtime.preemptM (11 samples, 0.08%)</title><rect x="1187.9" y="149" width="0.9" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1190.87" y="159.5" ></text>
</g>
<g >
<title>runtime.schedule (18 samples, 0.14%)</title><rect x="1158.1" y="197" width="1.6" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1161.12" y="207.5" ></text>
</g>
<g >
<title>runtime.mapiternext (55 samples, 0.41%)</title><rect x="1152.3" y="181" width="4.8" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1155.28" y="191.5" ></text>
</g>
<g >
<title>runtime.stealWork (15 samples, 0.11%)</title><rect x="1158.3" y="165" width="1.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1161.30" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (2 samples, 0.02%)</title><rect x="1187.3" y="117" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1190.34" y="127.5" ></text>
</g>
<g >
<title>runtime.suspendG (10 samples, 0.08%)</title><rect x="1186.6" y="149" width="0.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.63" y="159.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (3 samples, 0.02%)</title><rect x="1009.1" y="197" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1012.08" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocNeedsZero (2 samples, 0.02%)</title><rect x="984.4" y="85" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="987.37" y="95.5" ></text>
</g>
<g >
<title>runtime.lock2 (2 samples, 0.02%)</title><rect x="1166.3" y="149" width="0.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1169.27" y="159.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (2 samples, 0.02%)</title><rect x="1143.1" y="181" width="0.1" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1146.07" y="191.5" ></text>
</g>
<g >
<title>runtime.readUintptr (9 samples, 0.07%)</title><rect x="1081.7" y="149" width="0.8" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1084.70" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (6 samples, 0.05%)</title><rect x="1188.8" y="133" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1191.85" y="143.5" ></text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (7 samples, 0.05%)</title><rect x="1188.8" y="197" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1191.85" y="207.5" ></text>
</g>
<g >
<title>main.main (495 samples, 3.71%)</title><rect x="1113.6" y="213" width="43.8" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1116.58" y="223.5" >main..</text>
</g>
<g >
<title>runtime.findObject (13 samples, 0.10%)</title><rect x="1155.6" y="85" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1158.55" y="95.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (6 samples, 0.05%)</title><rect x="29.9" y="181" width="0.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="32.92" y="191.5" ></text>
</g>
<g >
<title>all (13,325 samples, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>runtime.procyield (2 samples, 0.02%)</title><rect x="1157.6" y="165" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1160.59" y="175.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (870 samples, 6.53%)</title><rect x="1036.5" y="229" width="77.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1039.53" y="239.5" >runtime...</text>
</g>
<g >
<title>runtime.semasleep (81 samples, 0.61%)</title><rect x="1172.4" y="165" width="7.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1175.38" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall4 (6 samples, 0.05%)</title><rect x="1180.5" y="165" width="0.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1183.52" y="175.5" ></text>
</g>
<g >
<title>runtime.morestack (231 samples, 1.73%)</title><rect x="1159.7" y="229" width="20.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1162.71" y="239.5" ></text>
</g>
<g >
<title>runtime.(*gcBits).bytep (2 samples, 0.02%)</title><rect x="1154.5" y="101" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1157.49" y="111.5" ></text>
</g>
<g >
<title>runtime.findRunnable (42 samples, 0.32%)</title><rect x="1162.5" y="165" width="3.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1165.55" y="175.5" ></text>
</g>
<g >
<title>github.com/zeebo/xxh3.xxhAvalancheSmall (2 samples, 0.02%)</title><rect x="54.5" y="213" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="57.54" y="223.5" ></text>
</g>
<g >
<title>runtime.mcall (26 samples, 0.20%)</title><rect x="1157.4" y="229" width="2.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1160.41" y="239.5" ></text>
</g>
<g >
<title>runtime.chansend1 (3 samples, 0.02%)</title><rect x="1035.9" y="213" width="0.3" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1038.91" y="223.5" ></text>
</g>
<g >
<title>runtime.semasleep (3 samples, 0.02%)</title><rect x="1187.5" y="69" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1190.52" y="79.5" ></text>
</g>
<g >
<title>runtime.sweepone (2 samples, 0.02%)</title><rect x="1036.4" y="213" width="0.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1039.36" y="223.5" ></text>
</g>
<g >
<title>runtime.greyobject (3 samples, 0.02%)</title><rect x="1187.5" y="165" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1190.52" y="175.5" ></text>
</g>
<g >
<title>runtime.arenaIdx.l1 (3 samples, 0.02%)</title><rect x="1008.8" y="197" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1011.82" y="207.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (5 samples, 0.04%)</title><rect x="1032.5" y="181" width="0.5" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1035.55" y="191.5" ></text>
</g>
<g >
<title>runtime.bulkBarrierPreWrite (267 samples, 2.00%)</title><rect x="1009.3" y="197" width="23.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1012.35" y="207.5" >r..</text>
</g>
</g>
</svg>
