<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>brc/pkg.(*Trie2Node).Iter (19 samples, 0.02%)</title><rect x="1155.0" y="149" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1157.97" y="159.5" ></text>
</g>
<g >
<title>runtime.sysUsedOS (15 samples, 0.02%)</title><rect x="1178.4" y="213" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1181.42" y="223.5" ></text>
</g>
<g >
<title>brc/pkg.(*Trie2Node).Iter (24 samples, 0.03%)</title><rect x="1154.9" y="229" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1157.90" y="239.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (61 samples, 0.07%)</title><rect x="1183.7" y="117" width="0.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1186.69" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfUnchecked (367 samples, 0.42%)</title><rect x="1127.3" y="181" width="5.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1130.30" y="191.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (11 samples, 0.01%)</title><rect x="1105.0" y="133" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1108.01" y="143.5" ></text>
</g>
<g >
<title>internal/bytealg.IndexByte (51 samples, 0.06%)</title><rect x="1089.6" y="213" width="0.7" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1092.56" y="223.5" ></text>
</g>
<g >
<title>cmp.Less[go.shape.uint8] (307 samples, 0.35%)</title><rect x="771.7" y="229" width="4.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="774.69" y="239.5" ></text>
</g>
<g >
<title>runtime.morestack (608 samples, 0.70%)</title><rect x="1168.4" y="261" width="8.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1171.39" y="271.5" ></text>
</g>
<g >
<title>brc/pkg.(*Trie2Node).Iter (24 samples, 0.03%)</title><rect x="1154.9" y="165" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1157.90" y="175.5" ></text>
</g>
<g >
<title>runtime.runqsteal (10 samples, 0.01%)</title><rect x="1169.4" y="165" width="0.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1172.44" y="175.5" ></text>
</g>
<g >
<title>runtime.gcDrain (2,429 samples, 2.80%)</title><rect x="1110.6" y="213" width="33.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1113.63" y="223.5" >ru..</text>
</g>
<g >
<title>all (86,703 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>indexbytebody (367 samples, 0.42%)</title><rect x="1084.6" y="213" width="5.0" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1087.57" y="223.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (23 samples, 0.03%)</title><rect x="1111.6" y="197" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1114.64" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (127 samples, 0.15%)</title><rect x="1174.7" y="197" width="1.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1177.68" y="207.5" ></text>
</g>
<g >
<title>brc/pkg.(*Trie2Node).Iter (9 samples, 0.01%)</title><rect x="1155.1" y="37" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1158.08" y="47.5" ></text>
</g>
<g >
<title>indexbytebody (1,112 samples, 1.28%)</title><rect x="129.9" y="245" width="15.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="132.90" y="255.5" ></text>
</g>
<g >
<title>slices.Insert[go.shape.[]*brc/pkg.Trie2Node,go.shape.*uint8] (14 samples, 0.02%)</title><rect x="1070.3" y="229" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1073.33" y="239.5" ></text>
</g>
<g >
<title>runtime.semasleep (79 samples, 0.09%)</title><rect x="1176.8" y="197" width="1.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1179.83" y="207.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (43 samples, 0.05%)</title><rect x="1143.0" y="197" width="0.6" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1146.02" y="207.5" ></text>
</g>
<g >
<title>runtime.pallocSum.max (8 samples, 0.01%)</title><rect x="1104.3" y="133" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1107.27" y="143.5" ></text>
</g>
<g >
<title>runtime.wakep (310 samples, 0.36%)</title><rect x="1169.8" y="213" width="4.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1172.79" y="223.5" ></text>
</g>
<g >
<title>runtime.newobject (16 samples, 0.02%)</title><rect x="1070.6" y="229" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1073.62" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocMSpanLocked (13 samples, 0.01%)</title><rect x="1102.4" y="133" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1105.44" y="143.5" ></text>
</g>
<g >
<title>runtime.preemptM (19 samples, 0.02%)</title><rect x="1187.0" y="165" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1189.97" y="175.5" ></text>
</g>
<g >
<title>runtime.spanOf (30 samples, 0.03%)</title><rect x="1153.9" y="181" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1156.92" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (23 samples, 0.03%)</title><rect x="1070.9" y="197" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1073.86" y="207.5" ></text>
</g>
<g >
<title>runtime.pageIndexOf (14 samples, 0.02%)</title><rect x="1153.7" y="181" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1156.73" y="191.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (71 samples, 0.08%)</title><rect x="1156.0" y="197" width="1.0" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1158.99" y="207.5" ></text>
</g>
<g >
<title>runtime.main (29 samples, 0.03%)</title><rect x="1154.9" y="261" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1157.89" y="271.5" ></text>
</g>
<g >
<title>runtime.semawakeup (84 samples, 0.10%)</title><rect x="1188.8" y="165" width="1.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1191.82" y="175.5" ></text>
</g>
<g >
<title>runtime.stealWork (14 samples, 0.02%)</title><rect x="1169.4" y="181" width="0.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1172.39" y="191.5" ></text>
</g>
<g >
<title>runtime.makeslice (535 samples, 0.62%)</title><rect x="1101.8" y="245" width="7.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1104.82" y="255.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (10 samples, 0.01%)</title><rect x="1188.4" y="165" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1191.43" y="175.5" ></text>
</g>
<g >
<title>runtime.semasleep (44 samples, 0.05%)</title><rect x="1187.2" y="133" width="0.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1190.24" y="143.5" ></text>
</g>
<g >
<title>bytes.IndexByte (463 samples, 0.53%)</title><rect x="1084.0" y="229" width="6.3" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1086.95" y="239.5" ></text>
</g>
<g >
<title>brc/pkg.(*Trie2Node).Iter (17 samples, 0.02%)</title><rect x="1155.0" y="133" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1158.00" y="143.5" ></text>
</g>
<g >
<title>runtime.suspendG (52 samples, 0.06%)</title><rect x="1186.5" y="181" width="0.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.53" y="191.5" ></text>
</g>
<g >
<title>runtime.procyield (12 samples, 0.01%)</title><rect x="1111.7" y="117" width="0.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1114.66" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mcache).allocLarge (208 samples, 0.24%)</title><rect x="1102.1" y="213" width="2.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1105.07" y="223.5" ></text>
</g>
<g >
<title>runtime.wakep (84 samples, 0.10%)</title><rect x="1188.8" y="213" width="1.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1191.82" y="223.5" ></text>
</g>
<g >
<title>runtime.semasleep (32 samples, 0.04%)</title><rect x="1186.5" y="133" width="0.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1189.53" y="143.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (16 samples, 0.02%)</title><rect x="1167.0" y="197" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1170.04" y="207.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (127 samples, 0.15%)</title><rect x="1174.7" y="181" width="1.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1177.68" y="191.5" ></text>
</g>
<g >
<title>runtime.preemptone (522 samples, 0.60%)</title><rect x="1179.4" y="181" width="7.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1182.43" y="191.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).alloc (77 samples, 0.09%)</title><rect x="1103.0" y="133" width="1.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1105.99" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mspan).divideByElemSize (15 samples, 0.02%)</title><rect x="1127.0" y="181" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1130.04" y="191.5" ></text>
</g>
<g >
<title>runtime.execute (10 samples, 0.01%)</title><rect x="1168.6" y="197" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1171.62" y="207.5" ></text>
</g>
<g >
<title>runtime.preemptall (9 samples, 0.01%)</title><rect x="1188.7" y="213" width="0.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1191.67" y="223.5" ></text>
</g>
<g >
<title>internal/bytealg.IndexByte (45 samples, 0.05%)</title><rect x="1098.7" y="229" width="0.6" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1101.71" y="239.5" ></text>
</g>
<g >
<title>runtime.runqgrab (12 samples, 0.01%)</title><rect x="1166.5" y="165" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1169.50" y="175.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerIdle (820 samples, 0.95%)</title><rect x="1143.7" y="229" width="11.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1146.73" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (177 samples, 0.20%)</title><rect x="1102.3" y="181" width="2.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1105.26" y="191.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (20 samples, 0.02%)</title><rect x="1069.9" y="213" width="0.3" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1072.92" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall4 (15 samples, 0.02%)</title><rect x="1178.4" y="197" width="0.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1181.42" y="207.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (38 samples, 0.04%)</title><rect x="1178.9" y="181" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1181.91" y="191.5" ></text>
</g>
<g >
<title>runtime.findRunnable (63 samples, 0.07%)</title><rect x="1168.8" y="197" width="0.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1171.76" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (61 samples, 0.07%)</title><rect x="1156.1" y="165" width="0.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1159.06" y="175.5" ></text>
</g>
<g >
<title>runtime.osyield (12 samples, 0.01%)</title><rect x="1176.4" y="213" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1179.40" y="223.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).push (8 samples, 0.01%)</title><rect x="1104.7" y="197" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1107.67" y="207.5" ></text>
</g>
<g >
<title>runtime.spanOf (22 samples, 0.03%)</title><rect x="1100.6" y="165" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1103.57" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (8 samples, 0.01%)</title><rect x="1188.3" y="165" width="0.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1191.33" y="175.5" ></text>
</g>
<g >
<title>runtime.markBits.isMarked (32 samples, 0.04%)</title><rect x="1139.8" y="181" width="0.4" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1142.79" y="191.5" ></text>
</g>
<g >
<title>brc/pkg.(*Trie2Node).Insert (31 samples, 0.04%)</title><rect x="1070.2" y="245" width="0.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1073.19" y="255.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (13 samples, 0.01%)</title><rect x="1166.8" y="213" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1169.82" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (89 samples, 0.10%)</title><rect x="1099.7" y="213" width="1.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1102.66" y="223.5" ></text>
</g>
<g >
<title>runtime.spanOfUnchecked (35 samples, 0.04%)</title><rect x="1142.5" y="197" width="0.5" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1145.54" y="207.5" ></text>
</g>
<g >
<title>runtime.lock2 (79 samples, 0.09%)</title><rect x="1176.8" y="213" width="1.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1179.83" y="223.5" ></text>
</g>
<g >
<title>runtime.markBits.isMarked (10 samples, 0.01%)</title><rect x="1153.6" y="181" width="0.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1156.57" y="191.5" ></text>
</g>
<g >
<title>runtime.releaseSudog (9 samples, 0.01%)</title><rect x="1101.5" y="213" width="0.1" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1104.51" y="223.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge.func1 (19 samples, 0.02%)</title><rect x="1178.6" y="245" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1181.64" y="255.5" ></text>
</g>
<g >
<title>runtime.forEachPInternal (24 samples, 0.03%)</title><rect x="1188.3" y="229" width="0.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1191.29" y="239.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (606 samples, 0.70%)</title><rect x="1168.4" y="245" width="8.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1171.42" y="255.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (26 samples, 0.03%)</title><rect x="1109.9" y="229" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1112.89" y="239.5" ></text>
</g>
<g >
<title>runtime.schedule (944 samples, 1.09%)</title><rect x="1155.5" y="229" width="12.8" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1158.50" y="239.5" ></text>
</g>
<g >
<title>brc/pkg.(*Trie2Node).Iter (16 samples, 0.02%)</title><rect x="1155.0" y="117" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1158.01" y="127.5" ></text>
</g>
<g >
<title>brc/pkg.MakeNode (16 samples, 0.02%)</title><rect x="1070.6" y="245" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1073.62" y="255.5" ></text>
</g>
<g >
<title>runtime.preemptM (147 samples, 0.17%)</title><rect x="1184.5" y="165" width="2.0" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1187.52" y="175.5" ></text>
</g>
<g >
<title>runtime.scanobject (744 samples, 0.86%)</title><rect x="1144.4" y="197" width="10.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1147.42" y="207.5" ></text>
</g>
<g >
<title>runtime.stdcall3 (19 samples, 0.02%)</title><rect x="1178.6" y="197" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1181.64" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (12 samples, 0.01%)</title><rect x="1109.6" y="181" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1112.59" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (67 samples, 0.08%)</title><rect x="1167.3" y="133" width="1.0" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1170.34" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mspan).divideByElemSize (9 samples, 0.01%)</title><rect x="1149.3" y="181" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1152.29" y="191.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (574 samples, 0.66%)</title><rect x="1179.4" y="245" width="7.8" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1182.43" y="255.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (61 samples, 0.07%)</title><rect x="1156.1" y="149" width="0.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1159.06" y="159.5" ></text>
</g>
<g >
<title>runtime.preemptone (24 samples, 0.03%)</title><rect x="1188.3" y="197" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1191.29" y="207.5" ></text>
</g>
<g >
<title>runtime.goready (23 samples, 0.03%)</title><rect x="1070.9" y="213" width="0.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1073.86" y="223.5" ></text>
</g>
<g >
<title>runtime.semasleep (33 samples, 0.04%)</title><rect x="1178.9" y="117" width="0.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1181.91" y="127.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (8 samples, 0.01%)</title><rect x="1155.3" y="181" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1158.31" y="191.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (9 samples, 0.01%)</title><rect x="1155.3" y="245" width="0.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1158.30" y="255.5" ></text>
</g>
<g >
<title>runtime.startm (295 samples, 0.34%)</title><rect x="1170.0" y="197" width="4.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1172.98" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (151 samples, 0.17%)</title><rect x="1102.3" y="149" width="2.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1105.34" y="159.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.forEachP.func5 (24 samples, 0.03%)</title><rect x="1188.3" y="245" width="0.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1191.29" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (174 samples, 0.20%)</title><rect x="1102.3" y="165" width="2.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1105.30" y="175.5" ></text>
</g>
<g >
<title>runtime.semasleep (11 samples, 0.01%)</title><rect x="1167.1" y="165" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1170.07" y="175.5" ></text>
</g>
<g >
<title>runtime.chansend1 (63 samples, 0.07%)</title><rect x="1100.9" y="245" width="0.9" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1103.90" y="255.5" ></text>
</g>
<g >
<title>runtime.lock2 (44 samples, 0.05%)</title><rect x="1187.2" y="149" width="0.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1190.24" y="159.5" ></text>
</g>
<g >
<title>runtime.typedmemmove (9 samples, 0.01%)</title><rect x="1071.2" y="197" width="0.1" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1074.21" y="207.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerIdle (77 samples, 0.09%)</title><rect x="1187.2" y="245" width="1.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1190.24" y="255.5" ></text>
</g>
<g >
<title>main.ParseBlocks.func1.1 (2,758 samples, 3.18%)</title><rect x="1071.6" y="261" width="37.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1074.57" y="271.5" >mai..</text>
</g>
<g >
<title>runtime.wbBufFlush1 (83 samples, 0.10%)</title><rect x="1099.7" y="181" width="1.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1102.74" y="191.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (13 samples, 0.01%)</title><rect x="1103.0" y="101" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1106.01" y="111.5" ></text>
</g>
<g >
<title>runtime.ready (19 samples, 0.02%)</title><rect x="1070.9" y="165" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1073.92" y="175.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (12 samples, 0.01%)</title><rect x="1154.7" y="197" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1157.71" y="207.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (51 samples, 0.06%)</title><rect x="1187.2" y="165" width="0.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1190.24" y="175.5" ></text>
</g>
<g >
<title>runtime.chansend (52 samples, 0.06%)</title><rect x="1100.9" y="229" width="0.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1103.92" y="239.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (644 samples, 0.74%)</title><rect x="1157.7" y="133" width="8.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1160.73" y="143.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (8 samples, 0.01%)</title><rect x="1155.3" y="229" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1158.31" y="239.5" ></text>
</g>
<g >
<title>runtime.preemptM (19 samples, 0.02%)</title><rect x="1188.3" y="181" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1191.33" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (176 samples, 0.20%)</title><rect x="1174.0" y="213" width="2.4" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1177.01" y="223.5" ></text>
</g>
<g >
<title>runtime.chanrecv (42 samples, 0.05%)</title><rect x="1070.9" y="229" width="0.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1073.86" y="239.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (292 samples, 0.34%)</title><rect x="1170.0" y="149" width="4.0" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1173.02" y="159.5" ></text>
</g>
<g >
<title>runtime.recv.goready.func1 (86 samples, 0.10%)</title><rect x="1188.8" y="245" width="1.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1191.79" y="255.5" ></text>
</g>
<g >
<title>runtime.lock2 (8 samples, 0.01%)</title><rect x="1155.3" y="213" width="0.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1158.31" y="223.5" ></text>
</g>
<g >
<title>runtime.checkTimers (12 samples, 0.01%)</title><rect x="1157.6" y="181" width="0.1" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="1160.57" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (79 samples, 0.09%)</title><rect x="1176.8" y="181" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1179.83" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfUnchecked (111 samples, 0.13%)</title><rect x="1149.4" y="181" width="1.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1152.44" y="191.5" ></text>
</g>
<g >
<title>brc/pkg.(*Trie2Node).Iter (24 samples, 0.03%)</title><rect x="1154.9" y="213" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1157.90" y="223.5" ></text>
</g>
<g >
<title>runtime.lock2 (33 samples, 0.04%)</title><rect x="1178.9" y="133" width="0.5" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1181.91" y="143.5" ></text>
</g>
<g >
<title>runtime.runqsteal (656 samples, 0.76%)</title><rect x="1157.7" y="181" width="9.0" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1160.73" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (28 samples, 0.03%)</title><rect x="1102.6" y="133" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1105.61" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (135 samples, 0.16%)</title><rect x="1176.8" y="245" width="1.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1179.80" y="255.5" ></text>
</g>
<g >
<title>runtime.preemptone (38 samples, 0.04%)</title><rect x="1178.9" y="165" width="0.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1181.91" y="175.5" ></text>
</g>
<g >
<title>runtime.spanOfUnchecked (11 samples, 0.01%)</title><rect x="1154.6" y="197" width="0.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1157.56" y="207.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (61 samples, 0.07%)</title><rect x="1183.7" y="133" width="0.8" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1186.69" y="143.5" ></text>
</g>
<g >
<title>runtime.chanrecv2 (52 samples, 0.06%)</title><rect x="1070.8" y="245" width="0.7" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1073.83" y="255.5" ></text>
</g>
<g >
<title>runtime.wakep (12 samples, 0.01%)</title><rect x="1071.0" y="149" width="0.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1074.01" y="159.5" ></text>
</g>
<g >
<title>runtime.(*pageCache).alloc (11 samples, 0.01%)</title><rect x="1104.1" y="133" width="0.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1107.10" y="143.5" ></text>
</g>
<g >
<title>runtime.preemptM (23 samples, 0.03%)</title><rect x="1187.9" y="165" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1190.93" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (33 samples, 0.04%)</title><rect x="1178.9" y="101" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1181.91" y="111.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).find (39 samples, 0.04%)</title><rect x="1103.5" y="117" width="0.5" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="1106.48" y="127.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (38 samples, 0.04%)</title><rect x="1178.9" y="213" width="0.5" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1181.91" y="223.5" ></text>
</g>
<g >
<title>runtime.osyield (644 samples, 0.74%)</title><rect x="1157.7" y="165" width="8.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1160.73" y="175.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (52 samples, 0.06%)</title><rect x="1186.5" y="197" width="0.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1189.53" y="207.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (12 samples, 0.01%)</title><rect x="1176.4" y="197" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1179.40" y="207.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (522 samples, 0.60%)</title><rect x="1179.4" y="197" width="7.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1182.43" y="207.5" ></text>
</g>
<g >
<title>runtime.scanobject (2,225 samples, 2.57%)</title><rect x="1112.3" y="197" width="30.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1115.26" y="207.5" >ru..</text>
</g>
<g >
<title>runtime.mcall (963 samples, 1.11%)</title><rect x="1155.3" y="261" width="13.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1158.28" y="271.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (14 samples, 0.02%)</title><rect x="1132.4" y="181" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1135.40" y="191.5" ></text>
</g>
<g >
<title>runtime.markroot (52 samples, 0.06%)</title><rect x="1186.5" y="213" width="0.7" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1189.53" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (18 samples, 0.02%)</title><rect x="1188.0" y="149" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1190.99" y="159.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (9 samples, 0.01%)</title><rect x="1109.6" y="149" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1112.59" y="159.5" ></text>
</g>
<g >
<title>runtime.procyield (13 samples, 0.01%)</title><rect x="1104.5" y="117" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1107.49" y="127.5" ></text>
</g>
<g >
<title>runtime.notewakeup (84 samples, 0.10%)</title><rect x="1188.8" y="181" width="1.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1191.82" y="191.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (34 samples, 0.04%)</title><rect x="1178.9" y="149" width="0.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1181.91" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (9 samples, 0.01%)</title><rect x="1166.9" y="165" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1169.88" y="175.5" ></text>
</g>
<g >
<title>runtime.greyobject (40 samples, 0.05%)</title><rect x="1153.0" y="181" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1156.02" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (276 samples, 0.32%)</title><rect x="1123.3" y="181" width="3.7" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1126.29" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (74 samples, 0.09%)</title><rect x="1187.2" y="213" width="1.0" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1190.24" y="223.5" ></text>
</g>
<g >
<title>runtime.scanobject (10 samples, 0.01%)</title><rect x="1105.0" y="117" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1108.01" y="127.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).tryGetFast (14 samples, 0.02%)</title><rect x="1110.4" y="213" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1113.44" y="223.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (38 samples, 0.04%)</title><rect x="1178.9" y="197" width="0.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1181.91" y="207.5" ></text>
</g>
<g >
<title>indexbytebody (529 samples, 0.61%)</title><rect x="1091.5" y="229" width="7.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1094.51" y="239.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (13 samples, 0.01%)</title><rect x="1111.6" y="149" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1114.65" y="159.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).allocRange (36 samples, 0.04%)</title><rect x="1103.0" y="117" width="0.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1105.99" y="127.5" ></text>
</g>
<g >
<title>runtime.bgsweep (88 samples, 0.10%)</title><rect x="1109.1" y="261" width="1.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1112.14" y="271.5" ></text>
</g>
<g >
<title>main.MapData.func1.1 (68,011 samples, 78.44%)</title><rect x="146.0" y="261" width="925.6" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="148.96" y="271.5" >main.MapData.func1.1</text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (38 samples, 0.04%)</title><rect x="1177.9" y="197" width="0.5" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1180.90" y="207.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (32 samples, 0.04%)</title><rect x="1186.5" y="165" width="0.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1189.53" y="175.5" ></text>
</g>
<g >
<title>bytes.IndexByte (667 samples, 0.77%)</title><rect x="1090.3" y="245" width="9.0" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1093.25" y="255.5" ></text>
</g>
<g >
<title>runtime.osyield (38 samples, 0.04%)</title><rect x="1177.9" y="213" width="0.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1180.90" y="223.5" ></text>
</g>
<g >
<title>runtime.schedule (98 samples, 0.11%)</title><rect x="1168.4" y="213" width="1.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1171.44" y="223.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (11 samples, 0.01%)</title><rect x="1105.0" y="165" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1108.01" y="175.5" ></text>
</g>
<g >
<title>runtime.gcStart.func1 (9 samples, 0.01%)</title><rect x="1188.7" y="245" width="0.1" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1191.67" y="255.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (11 samples, 0.01%)</title><rect x="1167.1" y="149" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1170.07" y="159.5" ></text>
</g>
<g >
<title>runtime.sysUsed (15 samples, 0.02%)</title><rect x="1178.4" y="229" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1181.42" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mspan).heapBitsSmallForAddr (97 samples, 0.11%)</title><rect x="1149.6" y="165" width="1.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1152.58" y="175.5" ></text>
</g>
<g >
<title>runtime.gcDrain (77 samples, 0.09%)</title><rect x="1187.2" y="229" width="1.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1190.24" y="239.5" ></text>
</g>
<g >
<title>runtime.ready (86 samples, 0.10%)</title><rect x="1188.8" y="229" width="1.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1191.79" y="239.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (31 samples, 0.04%)</title><rect x="1184.5" y="149" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1187.52" y="159.5" ></text>
</g>
<g >
<title>runtime.recv (18 samples, 0.02%)</title><rect x="1071.2" y="213" width="0.2" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1074.17" y="223.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (14 samples, 0.02%)</title><rect x="1105.0" y="197" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1107.97" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mspan).heapBitsSmallForAddr (335 samples, 0.39%)</title><rect x="1127.7" y="165" width="4.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1130.65" y="175.5" ></text>
</g>
<g >
<title>runtime.semasleep (8 samples, 0.01%)</title><rect x="1155.3" y="197" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1158.31" y="207.5" ></text>
</g>
<g >
<title>brc/pkg.(*Trie2Node).Iter (24 samples, 0.03%)</title><rect x="1154.9" y="181" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1157.90" y="191.5" ></text>
</g>
<g >
<title>brc/pkg.ParseIndec (375 samples, 0.43%)</title><rect x="1078.8" y="229" width="5.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1081.85" y="239.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (15 samples, 0.02%)</title><rect x="128.5" y="245" width="0.2" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="131.53" y="255.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (13 samples, 0.01%)</title><rect x="1154.3" y="181" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1157.33" y="191.5" ></text>
</g>
<g >
<title>brc/pkg.(*Trie2Node).Iter (12 samples, 0.01%)</title><rect x="1155.1" y="69" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1158.05" y="79.5" ></text>
</g>
<g >
<title>runtime.systemstack (11 samples, 0.01%)</title><rect x="1105.0" y="181" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1108.01" y="191.5" ></text>
</g>
<g >
<title>runtime.pageIndexOf (40 samples, 0.05%)</title><rect x="1140.3" y="181" width="0.6" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1143.31" y="191.5" ></text>
</g>
<g >
<title>slices.BinarySearch[go.shape.[]uint8,go.shape.uint8] (21,554 samples, 24.86%)</title><rect x="776.9" y="229" width="293.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="779.85" y="239.5" >slices.BinarySearch[go.shape.[]uint8,go..</text>
</g>
<g >
<title>runtime.stdcall2 (313 samples, 0.36%)</title><rect x="1179.4" y="117" width="4.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1182.43" y="127.5" ></text>
</g>
<g >
<title>runtime.startm (68 samples, 0.08%)</title><rect x="1167.3" y="181" width="1.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1170.33" y="191.5" ></text>
</g>
<g >
<title>runtime.gcDrain (808 samples, 0.93%)</title><rect x="1143.9" y="213" width="11.0" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1146.88" y="223.5" ></text>
</g>
<g >
<title>runtime.findObject (29 samples, 0.03%)</title><rect x="1100.2" y="165" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1103.18" y="175.5" ></text>
</g>
<g >
<title>runtime.(*gcBits).bitp (82 samples, 0.09%)</title><rect x="1146.8" y="181" width="1.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1149.80" y="191.5" ></text>
</g>
<g >
<title>internal/bytealg.IndexByte (65 samples, 0.07%)</title><rect x="145.0" y="245" width="0.9" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="148.04" y="255.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (374 samples, 0.43%)</title><rect x="1179.4" y="165" width="5.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1182.43" y="175.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (38 samples, 0.04%)</title><rect x="1178.9" y="229" width="0.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1181.91" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (3,269 samples, 3.77%)</title><rect x="1110.4" y="245" width="44.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1113.40" y="255.5" >runt..</text>
</g>
<g >
<title>runtime.systemstack (976 samples, 1.13%)</title><rect x="1176.7" y="261" width="13.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1179.68" y="271.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).putFast (25 samples, 0.03%)</title><rect x="1122.9" y="181" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1125.93" y="191.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (88 samples, 0.10%)</title><rect x="1099.7" y="197" width="1.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1102.67" y="207.5" ></text>
</g>
<g >
<title>runtime.mallocgc (528 samples, 0.61%)</title><rect x="1101.9" y="229" width="7.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1104.90" y="239.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (84 samples, 0.10%)</title><rect x="1188.8" y="149" width="1.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1191.82" y="159.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func4 (14 samples, 0.02%)</title><rect x="1109.6" y="197" width="0.2" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="1112.59" y="207.5" ></text>
</g>
<g >
<title>brc/pkg.(*Trie2Node).Iter (9 samples, 0.01%)</title><rect x="1155.1" y="53" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1158.08" y="63.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (49 samples, 0.06%)</title><rect x="1141.8" y="181" width="0.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1144.77" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (44 samples, 0.05%)</title><rect x="1187.2" y="117" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1190.24" y="127.5" ></text>
</g>
<g >
<title>runtime.spanOf (63 samples, 0.07%)</title><rect x="1140.9" y="181" width="0.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1143.91" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (13 samples, 0.01%)</title><rect x="1111.6" y="133" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1114.65" y="143.5" ></text>
</g>
<g >
<title>runtime.recv.goready.func1 (23 samples, 0.03%)</title><rect x="1070.9" y="181" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1073.86" y="191.5" ></text>
</g>
<g >
<title>gcWriteBarrier (113 samples, 0.13%)</title><rect x="1099.3" y="245" width="1.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1102.33" y="255.5" ></text>
</g>
<g >
<title>runtime.procyield (40 samples, 0.05%)</title><rect x="1174.1" y="197" width="0.6" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1177.13" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (9 samples, 0.01%)</title><rect x="1166.9" y="181" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1169.88" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (12 samples, 0.01%)</title><rect x="1176.4" y="181" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1179.40" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).tryGetFast (11 samples, 0.01%)</title><rect x="1143.7" y="213" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1146.73" y="223.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (117 samples, 0.13%)</title><rect x="1176.8" y="229" width="1.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1179.83" y="239.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (2,446 samples, 2.82%)</title><rect x="1110.4" y="229" width="33.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1113.44" y="239.5" >ru..</text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (11 samples, 0.01%)</title><rect x="1105.0" y="149" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1108.01" y="159.5" ></text>
</g>
<g >
<title>brc/pkg.(*Trie2Node).Iter (15 samples, 0.02%)</title><rect x="1155.0" y="101" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1158.02" y="111.5" ></text>
</g>
<g >
<title>runtime.lock2 (313 samples, 0.36%)</title><rect x="1179.4" y="149" width="4.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1182.43" y="159.5" ></text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (9 samples, 0.01%)</title><rect x="1188.7" y="229" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1191.67" y="239.5" ></text>
</g>
<g >
<title>runtime.notewakeup (68 samples, 0.08%)</title><rect x="1167.3" y="165" width="1.0" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1170.33" y="175.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (3,273 samples, 3.77%)</title><rect x="1110.3" y="261" width="44.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1113.34" y="271.5" >runt..</text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (38 samples, 0.04%)</title><rect x="1178.9" y="245" width="0.5" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1181.91" y="255.5" ></text>
</g>
<g >
<title>runtime.sweepone (86 samples, 0.10%)</title><rect x="1109.2" y="245" width="1.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1112.16" y="255.5" ></text>
</g>
<g >
<title>runtime.preemptall (24 samples, 0.03%)</title><rect x="1188.3" y="213" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1191.29" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (93 samples, 0.11%)</title><rect x="1148.0" y="181" width="1.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1151.03" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (38 samples, 0.04%)</title><rect x="1177.9" y="181" width="0.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1180.90" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (74 samples, 0.09%)</title><rect x="1187.2" y="197" width="1.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1190.24" y="207.5" ></text>
</g>
<g >
<title>bytes.IndexByte (1,263 samples, 1.46%)</title><rect x="128.7" y="261" width="17.2" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="131.73" y="271.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (8 samples, 0.01%)</title><rect x="1101.6" y="229" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1104.63" y="239.5" ></text>
</g>
<g >
<title>runtime.preemptone (14 samples, 0.02%)</title><rect x="1111.6" y="165" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1114.65" y="175.5" ></text>
</g>
<g >
<title>brc/pkg.SplitParse (1,040 samples, 1.20%)</title><rect x="1076.1" y="245" width="14.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1079.10" y="255.5" ></text>
</g>
<g >
<title>runtime.greyobject (76 samples, 0.09%)</title><rect x="1138.8" y="181" width="1.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1141.76" y="191.5" ></text>
</g>
<g >
<title>brc/pkg.(*Trie2Node).Iter (24 samples, 0.03%)</title><rect x="1154.9" y="197" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1157.90" y="207.5" ></text>
</g>
<g >
<title>runtime.findObject (143 samples, 0.16%)</title><rect x="1151.1" y="181" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1154.08" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (13 samples, 0.01%)</title><rect x="1166.8" y="197" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1169.82" y="207.5" ></text>
</g>
<g >
<title>brc/pkg.(*CityData).MergeValue (8,724 samples, 10.06%)</title><rect x="10.0" y="261" width="118.7" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >brc/pkg.(*City..</text>
</g>
<g >
<title>runtime.(*gcBits).bitp (272 samples, 0.31%)</title><rect x="1119.2" y="181" width="3.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1122.23" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).findRunnableGCWorker (12 samples, 0.01%)</title><rect x="1169.0" y="181" width="0.1" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1171.96" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (13 samples, 0.01%)</title><rect x="1167.0" y="181" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1170.04" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (14 samples, 0.02%)</title><rect x="1109.6" y="229" width="0.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1112.59" y="239.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (14 samples, 0.02%)</title><rect x="1111.6" y="181" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1114.65" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (108 samples, 0.12%)</title><rect x="1184.9" y="149" width="1.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1187.94" y="159.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (13 samples, 0.01%)</title><rect x="1104.5" y="149" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1107.49" y="159.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (411 samples, 0.47%)</title><rect x="1168.4" y="229" width="5.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1171.42" y="239.5" ></text>
</g>
<g >
<title>runtime.stealWork (702 samples, 0.81%)</title><rect x="1157.2" y="197" width="9.6" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1160.21" y="207.5" ></text>
</g>
<g >
<title>runtime.lock2 (8 samples, 0.01%)</title><rect x="1101.6" y="213" width="0.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1104.63" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (14 samples, 0.02%)</title><rect x="1070.6" y="213" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1073.63" y="223.5" ></text>
</g>
<g >
<title>runtime.semasleep (313 samples, 0.36%)</title><rect x="1179.4" y="133" width="4.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1182.43" y="143.5" ></text>
</g>
<g >
<title>runtime.lock2 (66 samples, 0.08%)</title><rect x="1156.0" y="181" width="0.9" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1158.99" y="191.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (21 samples, 0.02%)</title><rect x="1104.9" y="213" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1107.90" y="223.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (188 samples, 0.22%)</title><rect x="1174.0" y="229" width="2.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1177.01" y="239.5" ></text>
</g>
<g >
<title>runtime.preemptM (9 samples, 0.01%)</title><rect x="1188.7" y="181" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1191.67" y="191.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (90 samples, 0.10%)</title><rect x="1099.6" y="229" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1102.65" y="239.5" ></text>
</g>
<g >
<title>runtime.semawakeup (293 samples, 0.34%)</title><rect x="1170.0" y="165" width="4.0" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1173.01" y="175.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (277 samples, 0.32%)</title><rect x="1105.3" y="213" width="3.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1108.32" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (32 samples, 0.04%)</title><rect x="1186.5" y="117" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1189.53" y="127.5" ></text>
</g>
<g >
<title>runtime.lock2 (13 samples, 0.01%)</title><rect x="1104.5" y="133" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1107.49" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (178 samples, 0.21%)</title><rect x="1102.2" y="197" width="2.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1105.24" y="207.5" ></text>
</g>
<g >
<title>runtime.osyield (61 samples, 0.07%)</title><rect x="1183.7" y="149" width="0.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1186.69" y="159.5" ></text>
</g>
<g >
<title>runtime.findObject (453 samples, 0.52%)</title><rect x="1132.6" y="181" width="6.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1135.59" y="191.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (61 samples, 0.07%)</title><rect x="775.9" y="229" width="0.8" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="778.87" y="239.5" ></text>
</g>
<g >
<title>runtime.semawakeup (68 samples, 0.08%)</title><rect x="1167.3" y="149" width="1.0" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1170.33" y="159.5" ></text>
</g>
<g >
<title>brc/pkg.(*Trie2Node).Iter (13 samples, 0.01%)</title><rect x="1155.0" y="85" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1158.04" y="95.5" ></text>
</g>
<g >
<title>main.main (28 samples, 0.03%)</title><rect x="1154.9" y="245" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1157.90" y="255.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (522 samples, 0.60%)</title><rect x="1179.4" y="213" width="7.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1182.43" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall7 (8 samples, 0.01%)</title><rect x="1186.4" y="149" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1189.41" y="159.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Int64).Load (8 samples, 0.01%)</title><rect x="1166.7" y="181" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1169.66" y="191.5" ></text>
</g>
<g >
<title>runtime.growslice (9 samples, 0.01%)</title><rect x="1070.3" y="213" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1073.33" y="223.5" ></text>
</g>
<g >
<title>brc/pkg.(*Trie2Node).Get (67,786 samples, 78.18%)</title><rect x="147.6" y="245" width="922.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="150.65" y="255.5" >brc/pkg.(*Trie2Node).Get</text>
</g>
<g >
<title>runtime.sysUnused (19 samples, 0.02%)</title><rect x="1178.6" y="229" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1181.64" y="239.5" ></text>
</g>
<g >
<title>runtime.notewakeup (295 samples, 0.34%)</title><rect x="1170.0" y="181" width="4.0" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1172.98" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (32 samples, 0.04%)</title><rect x="1186.5" y="149" width="0.5" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1189.53" y="159.5" ></text>
</g>
<g >
<title>runtime.gcDrain (574 samples, 0.66%)</title><rect x="1179.4" y="229" width="7.8" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1182.43" y="239.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (18 samples, 0.02%)</title><rect x="1187.0" y="149" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1189.98" y="159.5" ></text>
</g>
<g >
<title>runtime.park_m (953 samples, 1.10%)</title><rect x="1155.4" y="245" width="13.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1158.42" y="255.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).free (10 samples, 0.01%)</title><rect x="1109.6" y="165" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1112.59" y="175.5" ></text>
</g>
<g >
<title>runtime.preemptone (74 samples, 0.09%)</title><rect x="1187.2" y="181" width="1.0" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1190.24" y="191.5" ></text>
</g>
<g >
<title>runtime.gopark (20 samples, 0.02%)</title><rect x="1101.2" y="213" width="0.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1104.24" y="223.5" ></text>
</g>
<g >
<title>runtime.resetspinning (92 samples, 0.11%)</title><rect x="1167.0" y="213" width="1.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1170.00" y="223.5" ></text>
</g>
<g >
<title>runtime.runqgrab.osyield.func1 (644 samples, 0.74%)</title><rect x="1157.7" y="149" width="8.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1160.73" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mspan).init (13 samples, 0.01%)</title><rect x="1102.8" y="117" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1105.79" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (14 samples, 0.02%)</title><rect x="1109.6" y="213" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1112.59" y="223.5" ></text>
</g>
<g >
<title>runtime.startm (84 samples, 0.10%)</title><rect x="1188.8" y="197" width="1.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1191.82" y="207.5" ></text>
</g>
<g >
<title>runtime.preemptone (9 samples, 0.01%)</title><rect x="1188.7" y="197" width="0.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1191.67" y="207.5" ></text>
</g>
<g >
<title>runtime.wakep (72 samples, 0.08%)</title><rect x="1167.3" y="197" width="1.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1170.27" y="207.5" ></text>
</g>
<g >
<title>runtime.findRunnable (820 samples, 0.95%)</title><rect x="1155.7" y="213" width="11.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1158.66" y="223.5" ></text>
</g>
<g >
<title>runtime.sysUnusedOS (19 samples, 0.02%)</title><rect x="1178.6" y="213" width="0.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1181.64" y="223.5" ></text>
</g>
</g>
</svg>
