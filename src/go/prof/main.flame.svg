<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>runtime.runqgrab.osyield.func1 (8 samples, 0.05%)</title><rect x="1098.0" y="101" width="0.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1100.98" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (10 samples, 0.07%)</title><rect x="870.2" y="101" width="0.8" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="873.17" y="111.5" ></text>
</g>
<g >
<title>runtime.suspendG (55 samples, 0.37%)</title><rect x="1164.5" y="149" width="4.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1167.49" y="159.5" ></text>
</g>
<g >
<title>runtime.lock2 (251 samples, 1.69%)</title><rect x="1133.7" y="117" width="20.0" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1136.74" y="127.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (26 samples, 0.18%)</title><rect x="1057.7" y="165" width="2.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1060.70" y="175.5" ></text>
</g>
<g >
<title>runtime.getempty (3 samples, 0.02%)</title><rect x="969.0" y="133" width="0.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="972.02" y="143.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (100 samples, 0.67%)</title><rect x="1125.8" y="213" width="7.9" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1128.80" y="223.5" ></text>
</g>
<g >
<title>runtime.bgscavenge (4 samples, 0.03%)</title><rect x="962.5" y="229" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="965.50" y="239.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (12 samples, 0.08%)</title><rect x="1125.8" y="69" width="0.9" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1128.80" y="79.5" ></text>
</g>
<g >
<title>indexbytebody (305 samples, 2.05%)</title><rect x="801.1" y="181" width="24.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="804.12" y="191.5" >i..</text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge.func1 (18 samples, 0.12%)</title><rect x="1123.5" y="213" width="1.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1126.49" y="223.5" ></text>
</g>
<g >
<title>runtime.lock2 (2 samples, 0.01%)</title><rect x="1097.5" y="149" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1100.51" y="159.5" ></text>
</g>
<g >
<title>runtime.findObject (116 samples, 0.78%)</title><rect x="992.5" y="149" width="9.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="995.46" y="159.5" ></text>
</g>
<g >
<title>runtime.lock2 (84 samples, 0.57%)</title><rect x="1168.9" y="85" width="6.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1171.86" y="95.5" ></text>
</g>
<g >
<title>runtime.markroot (55 samples, 0.37%)</title><rect x="1164.5" y="181" width="4.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1167.49" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).tryGet (4 samples, 0.03%)</title><rect x="969.4" y="165" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="972.42" y="175.5" ></text>
</g>
<g >
<title>runtime.runqgrab (8 samples, 0.05%)</title><rect x="1098.0" y="117" width="0.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1100.98" y="127.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (98 samples, 0.66%)</title><rect x="1155.9" y="117" width="7.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1158.91" y="127.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (5 samples, 0.03%)</title><rect x="1185.8" y="133" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1188.79" y="143.5" ></text>
</g>
<g >
<title>runtime.bgsweep (24 samples, 0.16%)</title><rect x="962.8" y="229" width="1.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="965.82" y="239.5" ></text>
</g>
<g >
<title>runtime.lock2 (9 samples, 0.06%)</title><rect x="1034.3" y="165" width="0.7" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1037.26" y="175.5" ></text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (30 samples, 0.20%)</title><rect x="1186.8" y="197" width="2.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1189.82" y="207.5" ></text>
</g>
<g >
<title>runtime.wakep (3 samples, 0.02%)</title><rect x="1189.3" y="181" width="0.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1192.28" y="191.5" ></text>
</g>
<g >
<title>runtime.ready (3 samples, 0.02%)</title><rect x="1189.3" y="197" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1192.28" y="207.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (86 samples, 0.58%)</title><rect x="1125.8" y="165" width="6.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1128.80" y="175.5" ></text>
</g>
<g >
<title>runtime.chansend1 (13 samples, 0.09%)</title><rect x="866.8" y="213" width="1.0" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="869.75" y="223.5" ></text>
</g>
<g >
<title>runtime.bulkBarrierPreWrite (653 samples, 4.40%)</title><rect x="909.5" y="197" width="51.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="912.50" y="207.5" >runti..</text>
</g>
<g >
<title>runtime.gcstopm (196 samples, 1.32%)</title><rect x="1018.7" y="165" width="15.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1021.68" y="175.5" ></text>
</g>
<g >
<title>runtime.(*pallocData).allocRange (2 samples, 0.01%)</title><rect x="871.9" y="69" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="874.92" y="79.5" ></text>
</g>
<g >
<title>runtime.lock2 (67 samples, 0.45%)</title><rect x="1125.8" y="101" width="5.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1128.80" y="111.5" ></text>
</g>
<g >
<title>runtime.mergeSummaries (3 samples, 0.02%)</title><rect x="871.6" y="53" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="874.60" y="63.5" ></text>
</g>
<g >
<title>runtime.semasleep (3 samples, 0.02%)</title><rect x="962.6" y="133" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="965.58" y="143.5" ></text>
</g>
<g >
<title>runtime.gcTrigger.test (2 samples, 0.01%)</title><rect x="882.2" y="181" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="885.25" y="191.5" ></text>
</g>
<g >
<title>runtime.runqsteal (8 samples, 0.05%)</title><rect x="1098.0" y="133" width="0.6" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1100.98" y="143.5" ></text>
</g>
<g >
<title>runtime.newstack (526 samples, 3.54%)</title><rect x="1057.3" y="213" width="41.8" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1060.30" y="223.5" >run..</text>
</g>
<g >
<title>runtime.preemptM (99 samples, 0.67%)</title><rect x="1177.8" y="149" width="7.9" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1180.84" y="159.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (4 samples, 0.03%)</title><rect x="1016.5" y="149" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1019.46" y="159.5" ></text>
</g>
<g >
<title>runtime.lock2 (475 samples, 3.20%)</title><rect x="1057.5" y="181" width="37.8" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1060.54" y="191.5" >run..</text>
</g>
<g >
<title>runtime.(*mheap).allocMSpanLocked (6 samples, 0.04%)</title><rect x="869.7" y="101" width="0.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="872.69" y="111.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (8 samples, 0.05%)</title><rect x="1017.6" y="149" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1020.57" y="159.5" ></text>
</g>
<g >
<title>main.main (8 samples, 0.05%)</title><rect x="1016.8" y="213" width="0.6" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1019.77" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mspan).heapBitsSmallForAddr (66 samples, 0.44%)</title><rect x="987.2" y="133" width="5.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="990.21" y="143.5" ></text>
</g>
<g >
<title>runtime.putfull (2 samples, 0.01%)</title><rect x="1011.5" y="117" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1014.53" y="127.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).free (2 samples, 0.01%)</title><rect x="964.5" y="133" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="967.49" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (24 samples, 0.16%)</title><rect x="1035.1" y="117" width="1.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1038.13" y="127.5" ></text>
</g>
<g >
<title>runtime.newMarkBits (2 samples, 0.01%)</title><rect x="964.2" y="181" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="967.17" y="191.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (215 samples, 1.45%)</title><rect x="944.3" y="181" width="17.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="947.31" y="191.5" ></text>
</g>
<g >
<title>runtime.greyobject (14 samples, 0.09%)</title><rect x="1132.6" y="149" width="1.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1135.63" y="159.5" ></text>
</g>
<g >
<title>runtime.sysUnusedOS (17 samples, 0.11%)</title><rect x="1123.6" y="181" width="1.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1126.57" y="191.5" ></text>
</g>
<g >
<title>runtime.schedule (487 samples, 3.28%)</title><rect x="1018.4" y="197" width="38.7" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1021.44" y="207.5" >run..</text>
</g>
<g >
<title>runtime.lock2 (8 samples, 0.05%)</title><rect x="1017.6" y="181" width="0.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1020.57" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (196 samples, 1.32%)</title><rect x="1018.7" y="149" width="15.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1021.68" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (651 samples, 4.38%)</title><rect x="965.0" y="213" width="51.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="968.05" y="223.5" >runti..</text>
</g>
<g >
<title>runtime.preemptM (14 samples, 0.09%)</title><rect x="1185.7" y="149" width="1.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1188.71" y="159.5" ></text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (14 samples, 0.09%)</title><rect x="1185.7" y="197" width="1.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1188.71" y="207.5" ></text>
</g>
<g >
<title>runtime.schedule (43 samples, 0.29%)</title><rect x="1095.3" y="181" width="3.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1098.28" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (5 samples, 0.03%)</title><rect x="1177.8" y="117" width="0.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1180.84" y="127.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (387 samples, 2.61%)</title><rect x="1133.7" y="181" width="30.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1136.74" y="191.5" >ru..</text>
</g>
<g >
<title>runtime.stdcall0 (7 samples, 0.05%)</title><rect x="1124.9" y="149" width="0.6" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1127.92" y="159.5" ></text>
</g>
<g >
<title>runtime.preemptall (99 samples, 0.67%)</title><rect x="1177.8" y="181" width="7.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1180.84" y="191.5" ></text>
</g>
<g >
<title>runtime.gcStart (3 samples, 0.02%)</title><rect x="882.0" y="181" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="885.01" y="191.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func4 (5 samples, 0.03%)</title><rect x="964.3" y="165" width="0.4" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="967.33" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (2 samples, 0.01%)</title><rect x="1186.8" y="117" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1189.82" y="127.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).findMappedAddr (2 samples, 0.01%)</title><rect x="872.6" y="69" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="875.63" y="79.5" ></text>
</g>
<g >
<title>runtime.lock2 (6 samples, 0.04%)</title><rect x="1186.8" y="133" width="0.5" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1189.82" y="143.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.01%)</title><rect x="1098.9" y="133" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1101.94" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (8 samples, 0.05%)</title><rect x="1186.2" y="133" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1189.19" y="143.5" ></text>
</g>
<g >
<title>runtime.wakep (4 samples, 0.03%)</title><rect x="1189.5" y="181" width="0.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1192.52" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (2 samples, 0.01%)</title><rect x="1132.5" y="69" width="0.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1135.47" y="79.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (555 samples, 3.74%)</title><rect x="1133.7" y="213" width="44.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1136.74" y="223.5" >runt..</text>
</g>
<g >
<title>runtime.ready (4 samples, 0.03%)</title><rect x="1189.5" y="197" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1192.52" y="207.5" ></text>
</g>
<g >
<title>runtime.lock2 (10 samples, 0.07%)</title><rect x="1124.9" y="181" width="0.8" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1127.92" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (14 samples, 0.09%)</title><rect x="1132.6" y="117" width="1.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1135.63" y="127.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.01%)</title><rect x="1132.5" y="85" width="0.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1135.47" y="95.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (13 samples, 0.09%)</title><rect x="1018.8" y="117" width="1.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1021.76" y="127.5" ></text>
</g>
<g >
<title>runtime.(*consistentHeapStats).acquire (3 samples, 0.02%)</title><rect x="868.5" y="165" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="871.50" y="175.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (4 samples, 0.03%)</title><rect x="1016.5" y="165" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1019.46" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (8 samples, 0.05%)</title><rect x="1187.3" y="133" width="0.6" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1190.30" y="143.5" ></text>
</g>
<g >
<title>runtime.chanrecv2 (8 samples, 0.05%)</title><rect x="403.7" y="213" width="0.7" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="406.73" y="223.5" ></text>
</g>
<g >
<title>runtime.procyield (9 samples, 0.06%)</title><rect x="873.2" y="85" width="0.7" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="876.19" y="95.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (2 samples, 0.01%)</title><rect x="1186.8" y="101" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1189.82" y="111.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (368 samples, 2.48%)</title><rect x="1066.0" y="149" width="29.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1069.04" y="159.5" >ru..</text>
</g>
<g >
<title>runtime.(*gcWork).balance (2 samples, 0.01%)</title><rect x="875.3" y="85" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="878.25" y="95.5" ></text>
</g>
<g >
<title>runtime.resetspinning (22 samples, 0.15%)</title><rect x="1055.4" y="181" width="1.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1058.39" y="191.5" ></text>
</g>
<g >
<title>runtime.procyield (79 samples, 0.53%)</title><rect x="1059.8" y="165" width="6.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1062.76" y="175.5" ></text>
</g>
<g >
<title>runtime.gcmarknewobject (4 samples, 0.03%)</title><rect x="882.4" y="181" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="885.41" y="191.5" ></text>
</g>
<g >
<title>runtime.gopark (2 samples, 0.01%)</title><rect x="964.9" y="213" width="0.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="967.89" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (28 samples, 0.19%)</title><rect x="1153.7" y="117" width="2.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1156.69" y="127.5" ></text>
</g>
<g >
<title>runtime.stdcall7 (2 samples, 0.01%)</title><rect x="1189.0" y="133" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1192.05" y="143.5" ></text>
</g>
<g >
<title>runtime.semasleep (368 samples, 2.48%)</title><rect x="1066.0" y="165" width="29.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1069.04" y="175.5" >ru..</text>
</g>
<g >
<title>runtime.park_m (489 samples, 3.29%)</title><rect x="1018.3" y="213" width="38.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1021.28" y="223.5" >run..</text>
</g>
<g >
<title>runtime.wakeNetPoller (3 samples, 0.02%)</title><rect x="962.6" y="181" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="965.58" y="191.5" ></text>
</g>
<g >
<title>runtime.stealWork (8 samples, 0.05%)</title><rect x="1098.0" y="149" width="0.6" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1100.98" y="159.5" ></text>
</g>
<g >
<title>brc/pkg.ParseIndec (811 samples, 5.46%)</title><rect x="765.1" y="197" width="64.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="768.12" y="207.5" >brc/pkg..</text>
</g>
<g >
<title>runtime.stdcall2 (55 samples, 0.37%)</title><rect x="1126.7" y="69" width="4.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1129.75" y="79.5" ></text>
</g>
<g >
<title>runtime.findObject (12 samples, 0.08%)</title><rect x="878.9" y="69" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="881.91" y="79.5" ></text>
</g>
<g >
<title>runtime.preemptone (10 samples, 0.07%)</title><rect x="968.2" y="133" width="0.8" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="971.22" y="143.5" ></text>
</g>
<g >
<title>runtime.scanobject (81 samples, 0.55%)</title><rect x="875.5" y="85" width="6.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="878.49" y="95.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (304 samples, 2.05%)</title><rect x="1099.3" y="213" width="24.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1102.33" y="223.5" >r..</text>
</g>
<g >
<title>runtime.gcDrainN (100 samples, 0.67%)</title><rect x="1125.8" y="181" width="7.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1128.80" y="191.5" ></text>
</g>
<g >
<title>runtime.runqsteal (224 samples, 1.51%)</title><rect x="1037.5" y="149" width="17.8" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1040.51" y="159.5" ></text>
</g>
<g >
<title>runtime.preemptone (14 samples, 0.09%)</title><rect x="1185.7" y="165" width="1.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1188.71" y="175.5" ></text>
</g>
<g >
<title>runtime.(*lfstack).push (2 samples, 0.01%)</title><rect x="969.3" y="117" width="0.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="972.26" y="127.5" ></text>
</g>
<g >
<title>runtime.lock2 (9 samples, 0.06%)</title><rect x="873.2" y="101" width="0.7" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="876.19" y="111.5" ></text>
</g>
<g >
<title>runtime.getempty (2 samples, 0.01%)</title><rect x="1011.4" y="117" width="0.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1014.37" y="127.5" ></text>
</g>
<g >
<title>runtime.semasleep (55 samples, 0.37%)</title><rect x="1126.7" y="85" width="4.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1129.75" y="95.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (2 samples, 0.01%)</title><rect x="1098.9" y="117" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1101.94" y="127.5" ></text>
</g>
<g >
<title>runtime.mcall (500 samples, 3.37%)</title><rect x="1017.4" y="229" width="39.7" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1020.41" y="239.5" >run..</text>
</g>
<g >
<title>runtime.semasleep (8 samples, 0.05%)</title><rect x="1034.3" y="149" width="0.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1037.34" y="159.5" ></text>
</g>
<g >
<title>runtime.recv.goready.func1 (3 samples, 0.02%)</title><rect x="1189.3" y="213" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1192.28" y="223.5" ></text>
</g>
<g >
<title>runtime.lock2 (3 samples, 0.02%)</title><rect x="962.6" y="149" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="965.58" y="159.5" ></text>
</g>
<g >
<title>runtime.preemptM (86 samples, 0.58%)</title><rect x="1125.8" y="117" width="6.8" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1128.80" y="127.5" ></text>
</g>
<g >
<title>runtime.newMarkBits (3 samples, 0.02%)</title><rect x="870.7" y="85" width="0.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="873.72" y="95.5" ></text>
</g>
<g >
<title>runtime.preemptM (387 samples, 2.61%)</title><rect x="1133.7" y="133" width="30.8" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1136.74" y="143.5" >ru..</text>
</g>
<g >
<title>runtime.findObject (125 samples, 0.84%)</title><rect x="951.5" y="117" width="9.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="954.46" y="127.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (8 samples, 0.05%)</title><rect x="1034.3" y="133" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1037.34" y="143.5" ></text>
</g>
<g >
<title>runtime.preemptM (14 samples, 0.09%)</title><rect x="1132.6" y="85" width="1.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1135.63" y="95.5" ></text>
</g>
<g >
<title>runtime.typedmemmove (3 samples, 0.02%)</title><rect x="404.0" y="181" width="0.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="407.05" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (36 samples, 0.24%)</title><rect x="1164.5" y="117" width="2.9" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1167.49" y="127.5" ></text>
</g>
<g >
<title>main.ReadFile.func1 (14 samples, 0.09%)</title><rect x="961.4" y="229" width="1.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="964.39" y="239.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (71 samples, 0.48%)</title><rect x="1169.9" y="53" width="5.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1172.90" y="63.5" ></text>
</g>
<g >
<title>runtime.systemstack (210 samples, 1.41%)</title><rect x="944.7" y="165" width="16.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="947.70" y="175.5" ></text>
</g>
<g >
<title>runtime.gopark (2 samples, 0.01%)</title><rect x="867.2" y="181" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="870.23" y="191.5" ></text>
</g>
<g >
<title>runtime.gcStart.func1 (30 samples, 0.20%)</title><rect x="1186.8" y="213" width="2.4" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1189.82" y="223.5" ></text>
</g>
<g >
<title>runtime.semasleep (218 samples, 1.47%)</title><rect x="1136.4" y="101" width="17.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1139.36" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (303 samples, 2.04%)</title><rect x="1099.3" y="197" width="24.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1102.33" y="207.5" >r..</text>
</g>
<g >
<title>runtime.lock2 (3 samples, 0.02%)</title><rect x="1189.3" y="165" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1192.28" y="175.5" ></text>
</g>
<g >
<title>runtime.unlock2 (2 samples, 0.01%)</title><rect x="1132.5" y="101" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1135.47" y="111.5" ></text>
</g>
<g >
<title>runtime.mallocgc (470 samples, 3.16%)</title><rect x="867.8" y="197" width="37.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="870.78" y="207.5" >run..</text>
</g>
<g >
<title>runtime.sweepone (23 samples, 0.15%)</title><rect x="962.9" y="213" width="1.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="965.90" y="223.5" ></text>
</g>
<g >
<title>runtime.preemptone (30 samples, 0.20%)</title><rect x="1186.8" y="165" width="2.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1189.82" y="175.5" ></text>
</g>
<g >
<title>runtime.(*pallocBits).findSmallN (2 samples, 0.01%)</title><rect x="872.8" y="53" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="875.79" y="63.5" ></text>
</g>
<g >
<title>runtime.semasleep (3 samples, 0.02%)</title><rect x="1189.3" y="149" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1192.28" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (19 samples, 0.13%)</title><rect x="1055.6" y="117" width="1.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1058.63" y="127.5" ></text>
</g>
<g >
<title>runtime.(*lfstack).push (2 samples, 0.01%)</title><rect x="1011.5" y="101" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1014.53" y="111.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (86 samples, 0.58%)</title><rect x="1125.8" y="149" width="6.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1128.80" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall7 (10 samples, 0.07%)</title><rect x="1163.7" y="117" width="0.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1166.70" y="127.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (10 samples, 0.07%)</title><rect x="1132.6" y="37" width="0.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1135.63" y="47.5" ></text>
</g>
<g >
<title>runtime.morestack (528 samples, 3.56%)</title><rect x="1057.1" y="229" width="42.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1060.14" y="239.5" >run..</text>
</g>
<g >
<title>runtime.runSafePointFn (4 samples, 0.03%)</title><rect x="1097.7" y="149" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1100.67" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (4 samples, 0.03%)</title><rect x="1131.1" y="101" width="0.3" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1134.12" y="111.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.forEachP.func5 (99 samples, 0.67%)</title><rect x="1177.8" y="213" width="7.9" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1180.84" y="223.5" ></text>
</g>
<g >
<title>runtime.modtimer (3 samples, 0.02%)</title><rect x="962.6" y="197" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="965.58" y="207.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (7 samples, 0.05%)</title><rect x="871.3" y="69" width="0.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="874.28" y="79.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).alloc (25 samples, 0.17%)</title><rect x="871.0" y="101" width="1.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="873.96" y="111.5" ></text>
</g>
<g >
<title>runtime.findObject (4 samples, 0.03%)</title><rect x="1016.5" y="117" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1019.46" y="127.5" ></text>
</g>
<g >
<title>runtime.lock2 (7 samples, 0.05%)</title><rect x="968.5" y="101" width="0.5" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="971.46" y="111.5" ></text>
</g>
<g >
<title>runtime.lock2 (4 samples, 0.03%)</title><rect x="1189.5" y="165" width="0.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1192.52" y="175.5" ></text>
</g>
<g >
<title>runtime.(*pallocBits).find (2 samples, 0.01%)</title><rect x="872.8" y="69" width="0.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="875.79" y="79.5" ></text>
</g>
<g >
<title>runtime.runqgrab (224 samples, 1.51%)</title><rect x="1037.5" y="133" width="17.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1040.51" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (4 samples, 0.03%)</title><rect x="1187.0" y="101" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1189.98" y="111.5" ></text>
</g>
<g >
<title>runtime.gcFlushBgCredit (4 samples, 0.03%)</title><rect x="969.7" y="165" width="0.4" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="972.73" y="175.5" ></text>
</g>
<g >
<title>runtime.preemptone (387 samples, 2.61%)</title><rect x="1133.7" y="149" width="30.8" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1136.74" y="159.5" >ru..</text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (7 samples, 0.05%)</title><rect x="964.2" y="197" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="967.17" y="207.5" ></text>
</g>
<g >
<title>runtime.preemptone (86 samples, 0.58%)</title><rect x="1125.8" y="133" width="6.8" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1128.80" y="143.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (9 samples, 0.06%)</title><rect x="1017.6" y="213" width="0.7" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1020.57" y="223.5" ></text>
</g>
<g >
<title>runtime.mapaccess2_fast32 (1,332 samples, 8.97%)</title><rect x="404.4" y="213" width="105.8" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="407.37" y="223.5" >runtime.mapa..</text>
</g>
<g >
<title>runtime.(*pageAlloc).allocToCache (2 samples, 0.01%)</title><rect x="872.9" y="101" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="875.95" y="111.5" ></text>
</g>
<g >
<title>runtime.lock2 (225 samples, 1.52%)</title><rect x="1099.4" y="181" width="17.9" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1102.41" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (13 samples, 0.09%)</title><rect x="1018.8" y="133" width="1.0" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1021.76" y="143.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (100 samples, 0.67%)</title><rect x="1125.8" y="197" width="7.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1128.80" y="207.5" ></text>
</g>
<g >
<title>runtime.preemptM (55 samples, 0.37%)</title><rect x="1164.5" y="133" width="4.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1167.49" y="143.5" ></text>
</g>
<g >
<title>runtime.wakep (3 samples, 0.02%)</title><rect x="962.6" y="165" width="0.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="965.58" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (1,142 samples, 7.69%)</title><rect x="1099.1" y="229" width="90.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1102.10" y="239.5" >runtime.sy..</text>
</g>
<g >
<title>runtime.stdcall2 (35 samples, 0.24%)</title><rect x="1164.6" y="85" width="2.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1167.57" y="95.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (113 samples, 0.76%)</title><rect x="1168.9" y="133" width="8.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1171.86" y="143.5" ></text>
</g>
<g >
<title>runtime.preemptall (14 samples, 0.09%)</title><rect x="1185.7" y="181" width="1.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1188.71" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).put (113 samples, 0.76%)</title><rect x="1168.9" y="149" width="8.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1171.86" y="159.5" ></text>
</g>
<g >
<title>runtime.putfull (2 samples, 0.01%)</title><rect x="969.3" y="133" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="972.26" y="143.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).update (2 samples, 0.01%)</title><rect x="868.8" y="165" width="0.2" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="871.82" y="175.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (12 samples, 0.08%)</title><rect x="881.0" y="69" width="0.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="883.98" y="79.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).allocRange (15 samples, 0.10%)</title><rect x="871.1" y="85" width="1.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="874.12" y="95.5" ></text>
</g>
<g >
<title>runtime.lock (10 samples, 0.07%)</title><rect x="1124.9" y="197" width="0.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1127.92" y="207.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (13 samples, 0.09%)</title><rect x="1168.9" y="53" width="1.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1171.86" y="63.5" ></text>
</g>
<g >
<title>runtime.(*fixalloc).alloc (6 samples, 0.04%)</title><rect x="869.7" y="85" width="0.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="872.69" y="95.5" ></text>
</g>
<g >
<title>runtime.(*mcache).allocLarge (79 samples, 0.53%)</title><rect x="868.4" y="181" width="6.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="871.42" y="191.5" ></text>
</g>
<g >
<title>main.SplitParse (1,585 samples, 10.67%)</title><rect x="740.7" y="213" width="126.0" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="743.73" y="223.5" >main.SplitParse</text>
</g>
<g >
<title>runtime.scanobject (583 samples, 3.93%)</title><rect x="970.1" y="165" width="46.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="973.13" y="175.5" >runt..</text>
</g>
<g >
<title>internal/bytealg.IndexByte (43 samples, 0.29%)</title><rect x="667.3" y="213" width="3.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="670.30" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall3 (17 samples, 0.11%)</title><rect x="1123.6" y="165" width="1.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1126.57" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (83 samples, 0.56%)</title><rect x="1110.7" y="149" width="6.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1113.70" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall7 (2 samples, 0.01%)</title><rect x="1185.5" y="133" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1188.47" y="143.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (2 samples, 0.01%)</title><rect x="964.5" y="117" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="967.49" y="127.5" ></text>
</g>
<g >
<title>gogo (2 samples, 0.01%)</title><rect x="10.0" y="229" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (142 samples, 0.96%)</title><rect x="1099.4" y="149" width="11.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1102.41" y="159.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).pop (4 samples, 0.03%)</title><rect x="963.9" y="181" width="0.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="966.85" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (179 samples, 1.21%)</title><rect x="1020.0" y="117" width="14.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1023.03" y="127.5" ></text>
</g>
<g >
<title>runtime.deductSweepCredit (2 samples, 0.01%)</title><rect x="874.5" y="165" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="877.54" y="175.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (655 samples, 4.41%)</title><rect x="964.7" y="229" width="52.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="967.73" y="239.5" >runti..</text>
</g>
<g >
<title>runtime.typePointers.next (76 samples, 0.51%)</title><rect x="938.3" y="181" width="6.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="941.27" y="191.5" ></text>
</g>
<g >
<title>runtime.greyobject (126 samples, 0.85%)</title><rect x="1001.7" y="149" width="10.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1004.68" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (218 samples, 1.47%)</title><rect x="1136.4" y="85" width="17.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1139.36" y="95.5" ></text>
</g>
<g >
<title>runtime.findRunnable (33 samples, 0.22%)</title><rect x="1096.0" y="165" width="2.6" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1099.00" y="175.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (387 samples, 2.61%)</title><rect x="1133.7" y="165" width="30.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1136.74" y="175.5" >ru..</text>
</g>
<g >
<title>runtime.stdcall2 (3 samples, 0.02%)</title><rect x="1125.5" y="149" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1128.48" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (8 samples, 0.05%)</title><rect x="1098.0" y="85" width="0.6" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1100.98" y="95.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.01%)</title><rect x="1098.9" y="165" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1101.94" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (60 samples, 0.40%)</title><rect x="869.2" y="117" width="4.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="872.21" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (64 samples, 0.43%)</title><rect x="869.0" y="133" width="5.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="871.98" y="143.5" ></text>
</g>
<g >
<title>runtime.scanobject (113 samples, 0.76%)</title><rect x="1168.9" y="181" width="8.9" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1171.86" y="191.5" ></text>
</g>
<g >
<title>runtime.procyield (3 samples, 0.02%)</title><rect x="1019.8" y="133" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1022.79" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (5 samples, 0.03%)</title><rect x="1167.4" y="117" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1170.35" y="127.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (13 samples, 0.09%)</title><rect x="1168.9" y="69" width="1.0" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1171.86" y="79.5" ></text>
</g>
<g >
<title>runtime.gcDrain (648 samples, 4.36%)</title><rect x="965.3" y="181" width="51.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="968.28" y="191.5" >runti..</text>
</g>
<g >
<title>runtime/pprof.profileWriter (2 samples, 0.01%)</title><rect x="1189.8" y="229" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1192.84" y="239.5" ></text>
</g>
<g >
<title>runtime.greyobject (113 samples, 0.76%)</title><rect x="1168.9" y="165" width="8.9" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1171.86" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mspan).init (3 samples, 0.02%)</title><rect x="870.5" y="85" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="873.49" y="95.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (33 samples, 0.22%)</title><rect x="1133.7" y="85" width="2.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1136.74" y="95.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).put (7 samples, 0.05%)</title><rect x="1011.1" y="133" width="0.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1014.13" y="143.5" ></text>
</g>
<g >
<title>runtime.lock2 (10 samples, 0.07%)</title><rect x="1132.6" y="69" width="0.8" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1135.63" y="79.5" ></text>
</g>
<g >
<title>runtime.preemptM (9 samples, 0.06%)</title><rect x="968.3" y="117" width="0.7" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="971.30" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfUnchecked (72 samples, 0.48%)</title><rect x="986.7" y="149" width="5.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="989.74" y="159.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).put (14 samples, 0.09%)</title><rect x="1132.6" y="133" width="1.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1135.63" y="143.5" ></text>
</g>
<g >
<title>runtime.preemptone (2 samples, 0.01%)</title><rect x="1011.2" y="101" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1014.21" y="111.5" ></text>
</g>
<g >
<title>indexbytebody (421 samples, 2.84%)</title><rect x="829.6" y="197" width="33.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="832.56" y="207.5" >in..</text>
</g>
<g >
<title>runtime.stdcall1 (14 samples, 0.09%)</title><rect x="1178.8" y="133" width="1.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1181.80" y="143.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (60 samples, 0.40%)</title><rect x="1011.7" y="149" width="4.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1014.69" y="159.5" ></text>
</g>
<g >
<title>runtime.unlock2 (2 samples, 0.01%)</title><rect x="1177.7" y="85" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1180.68" y="95.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.01%)</title><rect x="1177.7" y="69" width="0.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1180.68" y="79.5" ></text>
</g>
<g >
<title>internal/bytealg.IndexByte (46 samples, 0.31%)</title><rect x="863.0" y="197" width="3.7" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="866.02" y="207.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (526 samples, 3.54%)</title><rect x="1057.3" y="197" width="41.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1060.30" y="207.5" >run..</text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (207 samples, 1.39%)</title><rect x="944.9" y="149" width="16.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="947.94" y="159.5" ></text>
</g>
<g >
<title>runtime.semasleep (8 samples, 0.05%)</title><rect x="1017.6" y="165" width="0.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1020.57" y="175.5" ></text>
</g>
<g >
<title>runtime.preemptM (113 samples, 0.76%)</title><rect x="1168.9" y="101" width="8.9" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1171.86" y="111.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (142 samples, 0.96%)</title><rect x="1099.4" y="165" width="11.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1102.41" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall4 (76 samples, 0.51%)</title><rect x="1117.3" y="165" width="6.0" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1120.29" y="175.5" ></text>
</g>
<g >
<title>main.PrintOutput (3 samples, 0.02%)</title><rect x="1017.0" y="197" width="0.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1020.01" y="207.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (4 samples, 0.03%)</title><rect x="1016.5" y="133" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1019.46" y="143.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (9 samples, 0.06%)</title><rect x="1017.6" y="197" width="0.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1020.57" y="207.5" ></text>
</g>
<g >
<title>main.MapData.func1.1 (6,293 samples, 42.38%)</title><rect x="10.2" y="229" width="500.0" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="13.16" y="239.5" >main.MapData.func1.1</text>
</g>
<g >
<title>runtime.asyncPreempt (5 samples, 0.03%)</title><rect x="740.3" y="197" width="0.4" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="743.33" y="207.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (10 samples, 0.07%)</title><rect x="968.2" y="149" width="0.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="971.22" y="159.5" ></text>
</g>
<g >
<title>runtime.gcstopm (3 samples, 0.02%)</title><rect x="1097.3" y="149" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1100.27" y="159.5" ></text>
</g>
<g >
<title>runtime.preemptM (30 samples, 0.20%)</title><rect x="1186.8" y="149" width="2.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1189.82" y="159.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (12 samples, 0.08%)</title><rect x="1125.8" y="85" width="0.9" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1128.80" y="95.5" ></text>
</g>
<g >
<title>indexbytebody (941 samples, 6.34%)</title><rect x="592.5" y="213" width="74.8" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="595.53" y="223.5" >indexbyt..</text>
</g>
<g >
<title>runtime.forEachPInternal (99 samples, 0.67%)</title><rect x="1177.8" y="197" width="7.9" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1180.84" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (24 samples, 0.16%)</title><rect x="1035.1" y="133" width="1.9" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1038.13" y="143.5" ></text>
</g>
<g >
<title>runtime.semasleep (4 samples, 0.03%)</title><rect x="1187.0" y="117" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1189.98" y="127.5" ></text>
</g>
<g >
<title>runtime.wbMove (708 samples, 4.77%)</title><rect x="905.1" y="213" width="56.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="908.13" y="223.5" >runti..</text>
</g>
<g >
<title>runtime.checkTimers (3 samples, 0.02%)</title><rect x="1037.3" y="149" width="0.2" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="1040.28" y="159.5" ></text>
</g>
<g >
<title>runtime.(*pallocBits).summarize (2 samples, 0.01%)</title><rect x="871.4" y="53" width="0.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="874.44" y="63.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavengeOne (18 samples, 0.12%)</title><rect x="1123.5" y="197" width="1.4" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1126.49" y="207.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (2 samples, 0.01%)</title><rect x="1035.0" y="133" width="0.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1037.97" y="143.5" ></text>
</g>
<g >
<title>runtime.makeslice (470 samples, 3.16%)</title><rect x="867.8" y="213" width="37.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="870.78" y="223.5" >run..</text>
</g>
<g >
<title>runtime.semasleep (71 samples, 0.48%)</title><rect x="1169.9" y="69" width="5.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1172.90" y="79.5" ></text>
</g>
<g >
<title>main.Hash (881 samples, 5.93%)</title><rect x="670.7" y="213" width="70.0" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="673.72" y="223.5" >main.Hash</text>
</g>
<g >
<title>runtime.semasleep (83 samples, 0.56%)</title><rect x="1110.7" y="165" width="6.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1113.70" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (5 samples, 0.03%)</title><rect x="1175.5" y="85" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1178.54" y="95.5" ></text>
</g>
<g >
<title>runtime.checkTimers (3 samples, 0.02%)</title><rect x="1097.0" y="149" width="0.3" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="1100.03" y="159.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (89 samples, 0.60%)</title><rect x="874.9" y="101" width="7.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="877.94" y="111.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func4 (10 samples, 0.07%)</title><rect x="1124.9" y="213" width="0.8" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="1127.92" y="223.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (3 samples, 0.02%)</title><rect x="1097.7" y="117" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1100.75" y="127.5" ></text>
</g>
<g >
<title>runtime.runqgrab.osyield.func1 (224 samples, 1.51%)</title><rect x="1037.5" y="117" width="17.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1040.51" y="127.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (70 samples, 0.47%)</title><rect x="1179.9" y="133" width="5.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1182.91" y="143.5" ></text>
</g>
<g >
<title>runtime.stealWork (230 samples, 1.55%)</title><rect x="1037.0" y="165" width="18.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1040.04" y="175.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (90 samples, 0.61%)</title><rect x="874.9" y="133" width="7.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="877.86" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (3 samples, 0.02%)</title><rect x="1189.3" y="133" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1192.28" y="143.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).push (6 samples, 0.04%)</title><rect x="874.1" y="165" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="877.06" y="175.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (55 samples, 0.37%)</title><rect x="1164.5" y="165" width="4.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1167.49" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (64 samples, 0.43%)</title><rect x="869.0" y="165" width="5.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="871.98" y="175.5" ></text>
</g>
<g >
<title>runtime.wakep (4 samples, 0.03%)</title><rect x="1098.8" y="181" width="0.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1101.78" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (2 samples, 0.01%)</title><rect x="1177.7" y="53" width="0.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1180.68" y="63.5" ></text>
</g>
<g >
<title>runtime.procyield (7 samples, 0.05%)</title><rect x="968.5" y="85" width="0.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="971.46" y="95.5" ></text>
</g>
<g >
<title>runtime.(*mheap).nextSpanForSweep (5 samples, 0.03%)</title><rect x="963.8" y="197" width="0.4" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="966.77" y="207.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (12 samples, 0.08%)</title><rect x="1131.4" y="101" width="1.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1134.44" y="111.5" ></text>
</g>
<g >
<title>runtime.send.goready.func1 (4 samples, 0.03%)</title><rect x="1189.5" y="213" width="0.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1192.52" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mspan).heapBitsSmallForAddr (15 samples, 0.10%)</title><rect x="877.7" y="53" width="1.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="880.72" y="63.5" ></text>
</g>
<g >
<title>runtime.chansend (13 samples, 0.09%)</title><rect x="866.8" y="197" width="1.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="869.75" y="207.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (4 samples, 0.03%)</title><rect x="1133.4" y="69" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1136.42" y="79.5" ></text>
</g>
<g >
<title>runtime.main (8 samples, 0.05%)</title><rect x="1016.8" y="229" width="0.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1019.77" y="239.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone (2 samples, 0.01%)</title><rect x="874.7" y="149" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="877.70" y="159.5" ></text>
</g>
<g >
<title>runtime.semasleep (19 samples, 0.13%)</title><rect x="1055.6" y="133" width="1.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1058.63" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (2 samples, 0.01%)</title><rect x="1035.0" y="117" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1037.97" y="127.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (26 samples, 0.18%)</title><rect x="1057.7" y="149" width="2.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1060.70" y="159.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (3 samples, 0.02%)</title><rect x="1011.1" y="117" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1014.13" y="127.5" ></text>
</g>
<g >
<title>runtime.(*scavengerState).sleep (3 samples, 0.02%)</title><rect x="962.6" y="213" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="965.58" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (14 samples, 0.09%)</title><rect x="1167.8" y="117" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1170.75" y="127.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (27 samples, 0.18%)</title><rect x="401.6" y="213" width="2.1" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="404.59" y="223.5" ></text>
</g>
<g >
<title>runtime.gcDrain (555 samples, 3.74%)</title><rect x="1133.7" y="197" width="44.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1136.74" y="207.5" >runt..</text>
</g>
<g >
<title>runtime.chanrecv (7 samples, 0.05%)</title><rect x="403.8" y="197" width="0.6" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="406.81" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (35 samples, 0.24%)</title><rect x="1164.6" y="101" width="2.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1167.57" y="111.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (3 samples, 0.02%)</title><rect x="962.6" y="117" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="965.58" y="127.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (3 samples, 0.02%)</title><rect x="1189.6" y="133" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1192.60" y="143.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (4 samples, 0.03%)</title><rect x="1097.7" y="133" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1100.67" y="143.5" ></text>
</g>
<g >
<title>runtime.findRunnable (464 samples, 3.12%)</title><rect x="1018.5" y="181" width="36.9" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1021.52" y="191.5" >run..</text>
</g>
<g >
<title>runtime.stdcall0 (223 samples, 1.50%)</title><rect x="1037.6" y="101" width="17.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1040.59" y="111.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (90 samples, 0.61%)</title><rect x="874.9" y="117" width="7.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="877.86" y="127.5" ></text>
</g>
<g >
<title>runtime.(*scavengeIndex).alloc (3 samples, 0.02%)</title><rect x="872.1" y="69" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="875.08" y="79.5" ></text>
</g>
<g >
<title>runtime.semasleep (3 samples, 0.02%)</title><rect x="1125.5" y="165" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1128.48" y="175.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (26 samples, 0.18%)</title><rect x="1035.0" y="165" width="2.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1037.97" y="175.5" ></text>
</g>
<g >
<title>runtime.greyobject (14 samples, 0.09%)</title><rect x="879.9" y="69" width="1.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="882.86" y="79.5" ></text>
</g>
<g >
<title>all (14,850 samples, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>runtime.preemptone (113 samples, 0.76%)</title><rect x="1168.9" y="117" width="8.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1171.86" y="127.5" ></text>
</g>
<g >
<title>runtime.handoff (5 samples, 0.03%)</title><rect x="969.0" y="149" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="972.02" y="159.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (92 samples, 0.62%)</title><rect x="874.7" y="165" width="7.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="877.70" y="175.5" ></text>
</g>
<g >
<title>runtime.semasleep (179 samples, 1.21%)</title><rect x="1020.0" y="133" width="14.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1023.03" y="143.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (282 samples, 1.90%)</title><rect x="882.7" y="181" width="22.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="885.72" y="191.5" >r..</text>
</g>
<g >
<title>internal/bytealg.IndexByte (51 samples, 0.34%)</title><rect x="825.4" y="181" width="4.0" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="828.35" y="191.5" ></text>
</g>
<g >
<title>runtime.semasleep (7 samples, 0.05%)</title><rect x="1178.2" y="117" width="0.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1181.24" y="127.5" ></text>
</g>
<g >
<title>runtime.lock2 (21 samples, 0.14%)</title><rect x="1055.5" y="149" width="1.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1058.47" y="159.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (204 samples, 1.37%)</title><rect x="945.2" y="133" width="16.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="948.18" y="143.5" ></text>
</g>
<g >
<title>runtime.execute (4 samples, 0.03%)</title><rect x="1095.7" y="165" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1098.68" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2 (3 samples, 0.02%)</title><rect x="867.4" y="181" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="870.39" y="191.5" ></text>
</g>
<g >
<title>runtime.memhash32 (77 samples, 0.52%)</title><rect x="504.0" y="197" width="6.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="507.01" y="207.5" ></text>
</g>
<g >
<title>runtime.lock2 (26 samples, 0.18%)</title><rect x="1035.0" y="149" width="2.0" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1037.97" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (7 samples, 0.05%)</title><rect x="1178.2" y="101" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1181.24" y="111.5" ></text>
</g>
<g >
<title>runtime.semasleep (10 samples, 0.07%)</title><rect x="1132.6" y="53" width="0.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1135.63" y="63.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (92 samples, 0.62%)</title><rect x="874.7" y="181" width="7.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="877.70" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).findRunnableGCWorker (8 samples, 0.05%)</title><rect x="1096.4" y="149" width="0.6" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1099.39" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (22 samples, 0.15%)</title><rect x="1175.9" y="85" width="1.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1178.94" y="95.5" ></text>
</g>
<g >
<title>runtime.systemstack (5 samples, 0.03%)</title><rect x="964.3" y="181" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="967.33" y="191.5" ></text>
</g>
<g >
<title>runtime.preemptall (30 samples, 0.20%)</title><rect x="1186.8" y="181" width="2.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1189.82" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (14 samples, 0.09%)</title><rect x="1187.9" y="133" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1190.93" y="143.5" ></text>
</g>
<g >
<title>runtime.(*pageBits).clearRange (2 samples, 0.01%)</title><rect x="871.9" y="53" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="874.92" y="63.5" ></text>
</g>
<g >
<title>runtime.(*scavengeIndex).alloc (2 samples, 0.01%)</title><rect x="872.9" y="85" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="875.95" y="95.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func2 (14 samples, 0.09%)</title><rect x="1185.7" y="213" width="1.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1188.71" y="223.5" ></text>
</g>
<g >
<title>runtime.bulkBarrierPreWrite (3 samples, 0.02%)</title><rect x="404.0" y="165" width="0.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="407.05" y="175.5" ></text>
</g>
<g >
<title>runtime.semasleep (3 samples, 0.02%)</title><rect x="1189.6" y="149" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1192.60" y="159.5" ></text>
</g>
<g >
<title>main.ParseBlocks.func1.1 (5,678 samples, 38.24%)</title><rect x="510.2" y="229" width="451.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="513.21" y="239.5" >main.ParseBlocks.func1.1</text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (4 samples, 0.03%)</title><rect x="964.3" y="149" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="967.33" y="159.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).find (8 samples, 0.05%)</title><rect x="872.3" y="85" width="0.6" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="875.31" y="95.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.01%)</title><rect x="1098.9" y="149" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1101.94" y="159.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (33 samples, 0.22%)</title><rect x="1133.7" y="101" width="2.7" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1136.74" y="111.5" ></text>
</g>
<g >
<title>runtime.preemptone (99 samples, 0.67%)</title><rect x="1177.8" y="165" width="7.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1180.84" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (5 samples, 0.03%)</title><rect x="1177.8" y="101" width="0.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1180.84" y="111.5" ></text>
</g>
<g >
<title>runtime.wakep (22 samples, 0.15%)</title><rect x="1055.4" y="165" width="1.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1058.39" y="175.5" ></text>
</g>
<g >
<title>runtime.preemptone (14 samples, 0.09%)</title><rect x="1132.6" y="101" width="1.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1135.63" y="111.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (7 samples, 0.05%)</title><rect x="1124.9" y="165" width="0.6" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1127.92" y="175.5" ></text>
</g>
<g >
<title>runtime.sysUsedOS (76 samples, 0.51%)</title><rect x="1117.3" y="181" width="6.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1120.29" y="191.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (650 samples, 4.38%)</title><rect x="965.1" y="197" width="51.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="968.12" y="207.5" >runti..</text>
</g>
<g >
<title>runtime.lock2 (12 samples, 0.08%)</title><rect x="1177.8" y="133" width="1.0" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1180.84" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfUnchecked (15 samples, 0.10%)</title><rect x="877.7" y="69" width="1.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="880.72" y="79.5" ></text>
</g>
<g >
<title>runtime.systemstack (64 samples, 0.43%)</title><rect x="869.0" y="149" width="5.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="871.98" y="159.5" ></text>
</g>
<g >
<title>runtime.preemptM (2 samples, 0.01%)</title><rect x="1011.2" y="85" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1014.21" y="95.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (15 samples, 0.10%)</title><rect x="968.2" y="165" width="1.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="971.22" y="175.5" ></text>
</g>
<g >
<title>runtime.scanobject (14 samples, 0.09%)</title><rect x="1132.6" y="165" width="1.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1135.63" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (90 samples, 0.61%)</title><rect x="874.9" y="149" width="7.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="877.86" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.02%)</title><rect x="882.0" y="165" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="885.01" y="175.5" ></text>
</g>
</g>
</svg>
