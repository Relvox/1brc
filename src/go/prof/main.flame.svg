<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="278.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="261" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="261" > </text>
<g id="frames">
<g >
<title>runtime.gcDrain (16 samples, 0.13%)</title><rect x="1126.5" y="165" width="1.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1129.54" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (3 samples, 0.02%)</title><rect x="1186.6" y="85" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1189.62" y="95.5" ></text>
</g>
<g >
<title>runtime.preemptM (5 samples, 0.04%)</title><rect x="1185.1" y="117" width="0.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1188.12" y="127.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (114 samples, 0.91%)</title><rect x="1162.7" y="69" width="10.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1165.68" y="79.5" ></text>
</g>
<g >
<title>runtime.schedule (11 samples, 0.09%)</title><rect x="742.4" y="149" width="1.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="745.41" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mspan).heapBitsSmallForAddr (4 samples, 0.03%)</title><rect x="1092.1" y="117" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1095.09" y="127.5" ></text>
</g>
<g >
<title>runtime.osyield (13 samples, 0.10%)</title><rect x="1158.8" y="165" width="1.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1161.83" y="175.5" ></text>
</g>
<g >
<title>runtime.markroot (31 samples, 0.25%)</title><rect x="1182.7" y="165" width="2.9" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1185.68" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (2 samples, 0.02%)</title><rect x="1189.4" y="117" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1192.44" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (113 samples, 0.90%)</title><rect x="1022.2" y="149" width="10.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1025.15" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (9 samples, 0.07%)</title><rect x="999.1" y="133" width="0.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1002.06" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.02%)</title><rect x="1064.2" y="181" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1067.21" y="191.5" ></text>
</g>
<g >
<title>runtime.mcall (36 samples, 0.29%)</title><rect x="1128.6" y="213" width="3.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1131.61" y="223.5" ></text>
</g>
<g >
<title>runtime.readUintptr (3 samples, 0.02%)</title><rect x="1100.9" y="133" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1103.91" y="143.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (176 samples, 1.40%)</title><rect x="1000.0" y="165" width="16.5" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1003.00" y="175.5" ></text>
</g>
<g >
<title>runtime.main (6 samples, 0.05%)</title><rect x="1128.0" y="213" width="0.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1131.04" y="223.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).allocRange (2 samples, 0.02%)</title><rect x="998.1" y="69" width="0.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1001.12" y="79.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (6 samples, 0.05%)</title><rect x="1130.2" y="149" width="0.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1133.20" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (66 samples, 0.53%)</title><rect x="1176.2" y="101" width="6.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1179.20" y="111.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (3 samples, 0.02%)</title><rect x="1064.8" y="181" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1067.77" y="191.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func2 (4 samples, 0.03%)</title><rect x="1188.9" y="197" width="0.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1191.87" y="207.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).find (5 samples, 0.04%)</title><rect x="998.3" y="69" width="0.5" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="1001.31" y="79.5" ></text>
</g>
<g >
<title>github.com/zeebo/xxh3.readU64 (27 samples, 0.21%)</title><rect x="29.2" y="197" width="2.6" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="32.24" y="207.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (248 samples, 1.97%)</title><rect x="1162.7" y="197" width="23.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1165.68" y="207.5" >r..</text>
</g>
<g >
<title>runtime.(*gcWork).tryGet (2 samples, 0.02%)</title><rect x="1066.1" y="149" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1069.09" y="159.5" ></text>
</g>
<g >
<title>runtime.semawakeup (54 samples, 0.43%)</title><rect x="1140.4" y="117" width="5.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1143.43" y="127.5" ></text>
</g>
<g >
<title>main.PrintOutput (3 samples, 0.02%)</title><rect x="1128.3" y="181" width="0.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1131.32" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (12 samples, 0.10%)</title><rect x="1187.6" y="117" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1190.56" y="127.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (31 samples, 0.25%)</title><rect x="1182.7" y="149" width="2.9" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1185.68" y="159.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (24 samples, 0.19%)</title><rect x="1124.3" y="149" width="2.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1127.29" y="159.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (43 samples, 0.34%)</title><rect x="1057.0" y="165" width="4.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1059.98" y="175.5" ></text>
</g>
<g >
<title>runtime.pidlegetSpinning (4 samples, 0.03%)</title><rect x="1140.1" y="149" width="0.3" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1143.06" y="159.5" ></text>
</g>
<g >
<title>runtime.sysUsedOS (7 samples, 0.06%)</title><rect x="1160.6" y="165" width="0.7" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1163.62" y="175.5" ></text>
</g>
<g >
<title>runtime.runqgrab.osyield.func1 (7 samples, 0.06%)</title><rect x="1131.0" y="101" width="0.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1133.95" y="111.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).findRunnableGCWorker (6 samples, 0.05%)</title><rect x="1135.5" y="133" width="0.5" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1138.46" y="143.5" ></text>
</g>
<g >
<title>runtime.makeslice (204 samples, 1.62%)</title><rect x="997.4" y="197" width="19.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1000.37" y="207.5" ></text>
</g>
<g >
<title>runtime.preemptone (4 samples, 0.03%)</title><rect x="1189.2" y="149" width="0.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1192.25" y="159.5" ></text>
</g>
<g >
<title>runtime.mapaccess2_fast64 (1,500 samples, 11.93%)</title><rect x="609.2" y="197" width="140.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="612.20" y="207.5" >runtime.mapaccess..</text>
</g>
<g >
<title>runtime.preemptone (2 samples, 0.02%)</title><rect x="1186.0" y="133" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1188.96" y="143.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (138 samples, 1.10%)</title><rect x="1162.7" y="117" width="12.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1165.68" y="127.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (3 samples, 0.02%)</title><rect x="1185.6" y="85" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1188.59" y="95.5" ></text>
</g>
<g >
<title>runtime.lock2 (4 samples, 0.03%)</title><rect x="1186.2" y="101" width="0.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1189.15" y="111.5" ></text>
</g>
<g >
<title>runtime.findRunnable (46 samples, 0.37%)</title><rect x="1134.0" y="149" width="4.3" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1136.96" y="159.5" ></text>
</g>
<g >
<title>runtime.lock2 (2 samples, 0.02%)</title><rect x="1189.2" y="117" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1192.25" y="127.5" ></text>
</g>
<g >
<title>runtime.preemptall (4 samples, 0.03%)</title><rect x="1188.9" y="165" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1191.87" y="175.5" ></text>
</g>
<g >
<title>runtime.suspendG (31 samples, 0.25%)</title><rect x="1182.7" y="133" width="2.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1185.68" y="143.5" ></text>
</g>
<g >
<title>runtime.lock2 (2 samples, 0.02%)</title><rect x="1065.8" y="85" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1068.80" y="95.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (2 samples, 0.02%)</title><rect x="1186.0" y="149" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1188.96" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (112 samples, 0.89%)</title><rect x="1148.3" y="133" width="10.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1151.32" y="143.5" ></text>
</g>
<g >
<title>runtime.spanOf (28 samples, 0.22%)</title><rect x="1030.1" y="101" width="2.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1033.13" y="111.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (23 samples, 0.18%)</title><rect x="1182.7" y="69" width="2.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1185.68" y="79.5" ></text>
</g>
<g >
<title>runtime.newobject (3 samples, 0.02%)</title><rect x="750.0" y="197" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="753.01" y="207.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (3 samples, 0.02%)</title><rect x="1162.4" y="69" width="0.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1165.40" y="79.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (6 samples, 0.05%)</title><rect x="1187.0" y="117" width="0.6" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1190.00" y="127.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (12 samples, 0.10%)</title><rect x="1161.3" y="53" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1164.27" y="63.5" ></text>
</g>
<g >
<title>runtime.lock2 (12 samples, 0.10%)</title><rect x="1161.3" y="85" width="1.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1164.27" y="95.5" ></text>
</g>
<g >
<title>runtime.arenaIdx.l1 (2 samples, 0.02%)</title><rect x="1026.7" y="101" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1029.66" y="111.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (2 samples, 0.02%)</title><rect x="1188.9" y="117" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1191.87" y="127.5" ></text>
</g>
<g >
<title>runtime.scanobject (612 samples, 4.87%)</title><rect x="1066.8" y="149" width="57.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1069.84" y="159.5" >runtim..</text>
</g>
<g >
<title>runtime.markroot.func1 (5 samples, 0.04%)</title><rect x="1186.2" y="149" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1189.15" y="159.5" ></text>
</g>
<g >
<title>brc/pkg.(*CityData).Merge (3 samples, 0.02%)</title><rect x="1128.0" y="181" width="0.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1131.04" y="191.5" ></text>
</g>
<g >
<title>runtime.gopark (2 samples, 0.02%)</title><rect x="1064.4" y="197" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1067.40" y="207.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (2 samples, 0.02%)</title><rect x="1065.8" y="101" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1068.80" y="111.5" ></text>
</g>
<g >
<title>runtime.bucketMask (18 samples, 0.14%)</title><rect x="606.8" y="197" width="1.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="609.76" y="207.5" ></text>
</g>
<g >
<title>runtime.execute (2 samples, 0.02%)</title><rect x="25.8" y="133" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="28.77" y="143.5" ></text>
</g>
<g >
<title>runtime.preemptM (74 samples, 0.59%)</title><rect x="1175.6" y="117" width="7.0" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1178.64" y="127.5" ></text>
</g>
<g >
<title>runtime.spanOf (2 samples, 0.02%)</title><rect x="999.7" y="53" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1002.72" y="63.5" ></text>
</g>
<g >
<title>runtime.startm (54 samples, 0.43%)</title><rect x="1140.4" y="149" width="5.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1143.43" y="159.5" ></text>
</g>
<g >
<title>github.com/zeebo/xxh3.readU32 (5 samples, 0.04%)</title><rect x="28.8" y="197" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="31.77" y="207.5" ></text>
</g>
<g >
<title>runtime.findObject (34 samples, 0.27%)</title><rect x="1026.9" y="101" width="3.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1029.94" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (8 samples, 0.06%)</title><rect x="1160.5" y="197" width="0.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1163.52" y="207.5" ></text>
</g>
<g >
<title>runtime.unlock2 (3 samples, 0.02%)</title><rect x="1160.1" y="165" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1163.05" y="175.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (15 samples, 0.12%)</title><rect x="1161.3" y="149" width="1.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1164.27" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (2 samples, 0.02%)</title><rect x="1189.2" y="85" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1192.25" y="95.5" ></text>
</g>
<g >
<title>runtime.procyield (27 samples, 0.21%)</title><rect x="1145.7" y="149" width="2.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1148.69" y="159.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (154 samples, 1.23%)</title><rect x="1145.6" y="181" width="14.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1148.60" y="191.5" ></text>
</g>
<g >
<title>runtime.preemptone (213 samples, 1.69%)</title><rect x="1162.7" y="133" width="20.0" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1165.68" y="143.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (213 samples, 1.69%)</title><rect x="1162.7" y="149" width="20.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1165.68" y="159.5" ></text>
</g>
<g >
<title>runtime.forEachPInternal (24 samples, 0.19%)</title><rect x="1186.6" y="181" width="2.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1189.62" y="191.5" ></text>
</g>
<g >
<title>runtime.preemptall (4 samples, 0.03%)</title><rect x="1189.2" y="165" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1192.25" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (5 samples, 0.04%)</title><rect x="1137.8" y="69" width="0.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1140.81" y="79.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.02%)</title><rect x="998.8" y="101" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1001.78" y="111.5" ></text>
</g>
<g >
<title>runtime.lock2 (15 samples, 0.12%)</title><rect x="1128.7" y="165" width="1.4" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1131.70" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (4 samples, 0.03%)</title><rect x="1138.4" y="101" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1141.37" y="111.5" ></text>
</g>
<g >
<title>runtime.spanOf (2 samples, 0.02%)</title><rect x="1127.7" y="133" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1130.67" y="143.5" ></text>
</g>
<g >
<title>runtime.(*gQueue).pop (2 samples, 0.02%)</title><rect x="1135.3" y="133" width="0.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1138.27" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (6 samples, 0.05%)</title><rect x="1130.2" y="101" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1133.20" y="111.5" ></text>
</g>
<g >
<title>runtime.semasleep (15 samples, 0.12%)</title><rect x="1128.7" y="149" width="1.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1131.70" y="159.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (2 samples, 0.02%)</title><rect x="1189.2" y="133" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1192.25" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (4 samples, 0.03%)</title><rect x="1186.2" y="69" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1189.15" y="79.5" ></text>
</g>
<g >
<title>runtime.(*gcCPULimiterState).updateLocked (4 samples, 0.03%)</title><rect x="1135.6" y="101" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1138.55" y="111.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (2 samples, 0.02%)</title><rect x="1137.3" y="133" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1140.34" y="143.5" ></text>
</g>
<g >
<title>runtime.osyield (3 samples, 0.02%)</title><rect x="1184.8" y="101" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1187.84" y="111.5" ></text>
</g>
<g >
<title>runtime.execute (11 samples, 0.09%)</title><rect x="742.4" y="133" width="1.0" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="745.41" y="143.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (9 samples, 0.07%)</title><rect x="999.1" y="117" width="0.8" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1002.06" y="127.5" ></text>
</g>
<g >
<title>runtime.(*bmap).keys (2 samples, 0.02%)</title><rect x="598.5" y="197" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="601.50" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (112 samples, 0.89%)</title><rect x="1148.3" y="149" width="10.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1151.32" y="159.5" ></text>
</g>
<g >
<title>runtime.runqgrab.osyield.func1 (5 samples, 0.04%)</title><rect x="1137.8" y="85" width="0.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1140.81" y="95.5" ></text>
</g>
<g >
<title>runtime.lock2 (23 samples, 0.18%)</title><rect x="1182.7" y="101" width="2.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1185.68" y="111.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (24 samples, 0.19%)</title><rect x="1173.4" y="85" width="2.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1176.38" y="95.5" ></text>
</g>
<g >
<title>runtime.osyield (6 samples, 0.05%)</title><rect x="1137.7" y="101" width="0.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1140.71" y="111.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (213 samples, 1.69%)</title><rect x="1162.7" y="165" width="20.0" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1165.68" y="175.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerIdle (16 samples, 0.13%)</title><rect x="1126.5" y="181" width="1.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1129.54" y="191.5" ></text>
</g>
<g >
<title>runtime.runqsteal (8 samples, 0.06%)</title><rect x="1131.0" y="133" width="0.7" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1133.95" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mcache).allocLarge (17 samples, 0.14%)</title><rect x="997.5" y="165" width="1.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1000.46" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall4 (7 samples, 0.06%)</title><rect x="1160.6" y="149" width="0.7" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1163.62" y="159.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (301 samples, 2.39%)</title><rect x="1132.1" y="197" width="28.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1135.08" y="207.5" >r..</text>
</g>
<g >
<title>runtime.semasleep (3 samples, 0.02%)</title><rect x="1185.6" y="53" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1188.59" y="63.5" ></text>
</g>
<g >
<title>runtime.preemptone (15 samples, 0.12%)</title><rect x="1161.3" y="117" width="1.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1164.27" y="127.5" ></text>
</g>
<g >
<title>runtime.procyield (2 samples, 0.02%)</title><rect x="1065.8" y="69" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1068.80" y="79.5" ></text>
</g>
<g >
<title>runtime.findObject (2 samples, 0.02%)</title><rect x="999.4" y="53" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1002.44" y="63.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (3 samples, 0.02%)</title><rect x="25.7" y="165" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="28.68" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (13 samples, 0.10%)</title><rect x="1158.8" y="133" width="1.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1161.83" y="143.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (10 samples, 0.08%)</title><rect x="999.1" y="165" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1002.06" y="175.5" ></text>
</g>
<g >
<title>runtime.markroot (2 samples, 0.02%)</title><rect x="1066.6" y="149" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1069.65" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (2 samples, 0.02%)</title><rect x="1189.1" y="117" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1192.06" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mSpanStateBox).get (7 samples, 0.06%)</title><rect x="1020.1" y="181" width="0.6" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="1023.09" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (3 samples, 0.02%)</title><rect x="1185.6" y="69" width="0.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1188.59" y="79.5" ></text>
</g>
<g >
<title>runtime.sysUsed (7 samples, 0.06%)</title><rect x="1160.6" y="181" width="0.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1163.62" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (16 samples, 0.13%)</title><rect x="997.5" y="133" width="1.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1000.46" y="143.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerIdle (7 samples, 0.06%)</title><rect x="1186.0" y="197" width="0.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1188.96" y="207.5" ></text>
</g>
<g >
<title>main.main (6 samples, 0.05%)</title><rect x="1128.0" y="197" width="0.6" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1131.04" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (114 samples, 0.91%)</title><rect x="1162.7" y="85" width="10.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1165.68" y="95.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (655 samples, 5.21%)</title><rect x="1065.1" y="181" width="61.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1068.05" y="191.5" >runtim..</text>
</g>
<g >
<title>runtime.semasleep (23 samples, 0.18%)</title><rect x="1182.7" y="85" width="2.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1185.68" y="95.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (15 samples, 0.12%)</title><rect x="1161.3" y="165" width="1.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1164.27" y="175.5" ></text>
</g>
<g >
<title>runtime.scanobject (4 samples, 0.03%)</title><rect x="1185.6" y="165" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1188.59" y="175.5" ></text>
</g>
<g >
<title>runtime.stealWork (10 samples, 0.08%)</title><rect x="1130.9" y="149" width="0.9" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1133.86" y="159.5" ></text>
</g>
<g >
<title>runtime.(*wbBuf).get2 (121 samples, 0.96%)</title><rect x="1021.4" y="181" width="11.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1024.40" y="191.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (4 samples, 0.03%)</title><rect x="1186.2" y="117" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1189.15" y="127.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (2 samples, 0.02%)</title><rect x="1137.5" y="117" width="0.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1140.52" y="127.5" ></text>
</g>
<g >
<title>runtime.markrootSpans (2 samples, 0.02%)</title><rect x="1066.6" y="133" width="0.2" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="1069.65" y="143.5" ></text>
</g>
<g >
<title>runtime.bulkBarrierPreWrite (303 samples, 2.41%)</title><rect x="1032.9" y="181" width="28.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1035.95" y="191.5" >ru..</text>
</g>
<g >
<title>runtime.runqsteal (6 samples, 0.05%)</title><rect x="1137.7" y="117" width="0.6" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1140.71" y="127.5" ></text>
</g>
<g >
<title>runtime.preemptM (19 samples, 0.15%)</title><rect x="1187.0" y="133" width="1.8" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1190.00" y="143.5" ></text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (4 samples, 0.03%)</title><rect x="1189.2" y="181" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1192.25" y="191.5" ></text>
</g>
<g >
<title>runtime.wakep (59 samples, 0.47%)</title><rect x="1140.1" y="165" width="5.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1143.06" y="175.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (3 samples, 0.02%)</title><rect x="1066.3" y="149" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1069.27" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (7 samples, 0.06%)</title><rect x="1131.0" y="85" width="0.6" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1133.95" y="95.5" ></text>
</g>
<g >
<title>runtime.spanOf (26 samples, 0.21%)</title><rect x="1061.5" y="181" width="2.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1064.49" y="191.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (131 samples, 1.04%)</title><rect x="1109.0" y="133" width="12.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1111.99" y="143.5" ></text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (4 samples, 0.03%)</title><rect x="1188.9" y="181" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1191.87" y="191.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (144 samples, 1.15%)</title><rect x="1132.1" y="181" width="13.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1135.08" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (2 samples, 0.02%)</title><rect x="1186.0" y="165" width="0.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1188.96" y="175.5" ></text>
</g>
<g >
<title>runtime.preemptM (2 samples, 0.02%)</title><rect x="1189.4" y="133" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1192.44" y="143.5" ></text>
</g>
<g >
<title>runtime.lock2 (114 samples, 0.91%)</title><rect x="1162.7" y="101" width="10.7" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1165.68" y="111.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (3 samples, 0.02%)</title><rect x="1184.8" y="69" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1187.84" y="79.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (9 samples, 0.07%)</title><rect x="999.1" y="149" width="0.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1002.06" y="159.5" ></text>
</g>
<g >
<title>runtime.lock2 (141 samples, 1.12%)</title><rect x="1145.6" y="165" width="13.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1148.60" y="175.5" ></text>
</g>
<g >
<title>runtime.forEachP (2 samples, 0.02%)</title><rect x="1064.2" y="197" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1067.21" y="207.5" ></text>
</g>
<g >
<title>runtime.runqget (9 samples, 0.07%)</title><rect x="1138.8" y="149" width="0.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1141.84" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (4 samples, 0.03%)</title><rect x="1091.6" y="133" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1094.62" y="143.5" ></text>
</g>
<g >
<title>runtime.semasleep (4 samples, 0.03%)</title><rect x="1186.2" y="85" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1189.15" y="95.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (32 samples, 0.25%)</title><rect x="1121.3" y="133" width="3.0" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1124.28" y="143.5" ></text>
</g>
<g >
<title>runtime.preemptone (24 samples, 0.19%)</title><rect x="1186.6" y="149" width="2.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1189.62" y="159.5" ></text>
</g>
<g >
<title>github.com/zeebo/xxh3.rrmxmx (145 samples, 1.15%)</title><rect x="31.8" y="197" width="13.6" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="34.78" y="207.5" ></text>
</g>
<g >
<title>runtime.checkTimers (7 samples, 0.06%)</title><rect x="1136.2" y="133" width="0.7" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="1139.21" y="143.5" ></text>
</g>
<g >
<title>runtime.morestack (302 samples, 2.40%)</title><rect x="1132.0" y="213" width="28.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1134.99" y="223.5" >ru..</text>
</g>
<g >
<title>runtime.lock2 (6 samples, 0.05%)</title><rect x="1130.2" y="133" width="0.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1133.20" y="143.5" ></text>
</g>
<g >
<title>runtime.mallocgc (203 samples, 1.61%)</title><rect x="997.5" y="181" width="19.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1000.46" y="191.5" ></text>
</g>
<g >
<title>runtime.osyield (7 samples, 0.06%)</title><rect x="1131.0" y="117" width="0.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1133.95" y="127.5" ></text>
</g>
<g >
<title>runtime.gcDrain (7 samples, 0.06%)</title><rect x="1186.0" y="181" width="0.6" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1188.96" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (3 samples, 0.02%)</title><rect x="1160.1" y="133" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1163.05" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (16 samples, 0.13%)</title><rect x="997.5" y="117" width="1.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1000.46" y="127.5" ></text>
</g>
<g >
<title>github.com/zeebo/xxh3.mulFold64 (29 samples, 0.23%)</title><rect x="26.1" y="197" width="2.7" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="29.05" y="207.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (11 samples, 0.09%)</title><rect x="742.4" y="181" width="1.0" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="745.41" y="191.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.forEachP.func5 (24 samples, 0.19%)</title><rect x="1186.6" y="197" width="2.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1189.62" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (6 samples, 0.05%)</title><rect x="1130.2" y="117" width="0.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1133.20" y="127.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (2 samples, 0.02%)</title><rect x="1065.8" y="149" width="0.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1068.80" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (13 samples, 0.10%)</title><rect x="997.6" y="101" width="1.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1000.56" y="111.5" ></text>
</g>
<g >
<title>runtime.semasleep (3 samples, 0.02%)</title><rect x="1186.6" y="101" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1189.62" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (4 samples, 0.03%)</title><rect x="997.7" y="85" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1000.75" y="95.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (3 samples, 0.02%)</title><rect x="1185.6" y="37" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1188.59" y="47.5" ></text>
</g>
<g >
<title>runtime.scanobject (16 samples, 0.13%)</title><rect x="1126.5" y="149" width="1.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1129.54" y="159.5" ></text>
</g>
<g >
<title>runtime.memhash64 (70 samples, 0.56%)</title><rect x="743.4" y="181" width="6.6" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="746.44" y="191.5" ></text>
</g>
<g >
<title>all (12,570 samples, 100%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>runtime.execute (16 samples, 0.13%)</title><rect x="1132.5" y="149" width="1.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1135.46" y="159.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (112 samples, 0.89%)</title><rect x="1022.2" y="133" width="10.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1025.25" y="143.5" ></text>
</g>
<g >
<title>runtime.gcDrain (248 samples, 1.97%)</title><rect x="1162.7" y="181" width="23.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1165.68" y="191.5" >r..</text>
</g>
<g >
<title>runtime.globrunqget (4 samples, 0.03%)</title><rect x="1137.0" y="133" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1139.96" y="143.5" ></text>
</g>
<g >
<title>runtime.schedule (19 samples, 0.15%)</title><rect x="1130.2" y="181" width="1.8" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1133.20" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (2 samples, 0.02%)</title><rect x="1137.3" y="117" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1140.34" y="127.5" ></text>
</g>
<g >
<title>runtime.park_m (19 samples, 0.15%)</title><rect x="1130.2" y="197" width="1.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1133.20" y="207.5" ></text>
</g>
<g >
<title>runtime.nanotime (2 samples, 0.02%)</title><rect x="1137.5" y="133" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1140.52" y="143.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (4 samples, 0.03%)</title><rect x="1186.6" y="133" width="0.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1189.62" y="143.5" ></text>
</g>
<g >
<title>runtime.unlockWithRank (2 samples, 0.02%)</title><rect x="1139.9" y="165" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1142.87" y="175.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (9 samples, 0.07%)</title><rect x="999.1" y="101" width="0.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1002.06" y="111.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (35 samples, 0.28%)</title><rect x="603.5" y="197" width="3.3" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="606.47" y="207.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (15 samples, 0.12%)</title><rect x="1161.3" y="197" width="1.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1164.27" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (4 samples, 0.03%)</title><rect x="1138.4" y="117" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1141.37" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (313 samples, 2.49%)</title><rect x="1160.3" y="213" width="29.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1163.34" y="223.5" >ru..</text>
</g>
<g >
<title>runtime.findObject (73 samples, 0.58%)</title><rect x="1093.9" y="133" width="6.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1096.87" y="143.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (11 samples, 0.09%)</title><rect x="742.4" y="165" width="1.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="745.41" y="175.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (2 samples, 0.02%)</title><rect x="1186.0" y="117" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1188.96" y="127.5" ></text>
</g>
<g >
<title>runtime.casgstatus (5 samples, 0.04%)</title><rect x="742.7" y="117" width="0.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="745.69" y="127.5" ></text>
</g>
<g >
<title>main.MapData.func1.1 (7,453 samples, 59.29%)</title><rect x="50.6" y="213" width="699.7" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="53.65" y="223.5" >main.MapData.func1.1</text>
</g>
<g >
<title>runtime.(*gcCPULimiterState).update (4 samples, 0.03%)</title><rect x="1135.6" y="117" width="0.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1138.55" y="127.5" ></text>
</g>
<g >
<title>main.ParseBlocks.func1.1 (3,341 samples, 26.58%)</title><rect x="750.3" y="213" width="313.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="753.29" y="223.5" >main.ParseBlocks.func1.1</text>
</g>
<g >
<title>github.com/zeebo/xxh3.Hash (432 samples, 3.44%)</title><rect x="10.0" y="213" width="40.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >git..</text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (15 samples, 0.12%)</title><rect x="1161.3" y="181" width="1.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1164.27" y="191.5" ></text>
</g>
<g >
<title>runtime.wbMove (505 samples, 4.02%)</title><rect x="1016.5" y="197" width="47.4" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1019.52" y="207.5" >runt..</text>
</g>
<g >
<title>runtime.stealWork (6 samples, 0.05%)</title><rect x="1137.7" y="133" width="0.6" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1140.71" y="143.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).alloc (7 samples, 0.06%)</title><rect x="998.1" y="85" width="0.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1001.12" y="95.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (2 samples, 0.02%)</title><rect x="1127.9" y="133" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1130.86" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (24 samples, 0.19%)</title><rect x="1173.4" y="69" width="2.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1176.38" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mheap).setSpans (3 samples, 0.02%)</title><rect x="997.8" y="69" width="0.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1000.84" y="79.5" ></text>
</g>
<g >
<title>runtime.stdcall7 (2 samples, 0.02%)</title><rect x="1182.4" y="101" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1185.40" y="111.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).putFast (2 samples, 0.02%)</title><rect x="1091.4" y="133" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1094.43" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (675 samples, 5.37%)</title><rect x="1064.7" y="197" width="63.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1067.68" y="207.5" >runtim..</text>
</g>
<g >
<title>runtime.markroot (5 samples, 0.04%)</title><rect x="1186.2" y="165" width="0.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1189.15" y="175.5" ></text>
</g>
<g >
<title>runtime.schedule (2 samples, 0.02%)</title><rect x="25.8" y="149" width="0.2" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="28.77" y="159.5" ></text>
</g>
<g >
<title>github.com/zeebo/xxh3.hashAny (140 samples, 1.11%)</title><rect x="12.9" y="197" width="13.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="15.91" y="207.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (54 samples, 0.43%)</title><rect x="1140.4" y="101" width="5.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1143.43" y="111.5" ></text>
</g>
<g >
<title>runtime.add (51 samples, 0.41%)</title><rect x="598.7" y="197" width="4.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="601.69" y="207.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (13 samples, 0.10%)</title><rect x="1092.7" y="133" width="1.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1095.65" y="143.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (4 samples, 0.03%)</title><rect x="1061.0" y="165" width="0.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1064.02" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (16 samples, 0.13%)</title><rect x="997.5" y="149" width="1.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1000.46" y="159.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (9 samples, 0.07%)</title><rect x="999.1" y="85" width="0.8" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1002.06" y="95.5" ></text>
</g>
<g >
<title>runtime.runtimer (2 samples, 0.02%)</title><rect x="1136.7" y="117" width="0.2" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1139.68" y="127.5" ></text>
</g>
<g >
<title>runtime.unlockWithRank (3 samples, 0.02%)</title><rect x="1160.1" y="181" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1163.05" y="191.5" ></text>
</g>
<g >
<title>runtime.greyobject (4 samples, 0.03%)</title><rect x="1185.6" y="149" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1188.59" y="159.5" ></text>
</g>
<g >
<title>runtime.semawakeup (3 samples, 0.02%)</title><rect x="1160.1" y="149" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1163.05" y="159.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (681 samples, 5.42%)</title><rect x="1064.1" y="213" width="63.9" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1067.11" y="223.5" >runtime..</text>
</g>
<g >
<title>runtime.gcStart.func1 (4 samples, 0.03%)</title><rect x="1189.2" y="197" width="0.4" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1192.25" y="207.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (26 samples, 0.21%)</title><rect x="1182.7" y="117" width="2.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1185.68" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfType (6 samples, 0.05%)</title><rect x="1020.8" y="181" width="0.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1023.84" y="191.5" ></text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.02%)</title><rect x="1189.2" y="101" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1192.25" y="111.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).put (4 samples, 0.03%)</title><rect x="1185.6" y="133" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1188.59" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (3 samples, 0.02%)</title><rect x="1162.4" y="53" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1165.40" y="63.5" ></text>
</g>
<g >
<title>runtime.preemptall (24 samples, 0.19%)</title><rect x="1186.6" y="165" width="2.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1189.62" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (4 samples, 0.03%)</title><rect x="1185.2" y="101" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1188.21" y="111.5" ></text>
</g>
<g >
<title>runtime.gogo (3 samples, 0.02%)</title><rect x="743.2" y="117" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="746.16" y="127.5" ></text>
</g>
<g >
<title>runtime.lock2 (3 samples, 0.02%)</title><rect x="1186.6" y="117" width="0.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1189.62" y="127.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.02%)</title><rect x="750.0" y="181" width="0.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="753.01" y="191.5" ></text>
</g>
<g >
<title>runtime.preemptone (4 samples, 0.03%)</title><rect x="1188.9" y="149" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1191.87" y="159.5" ></text>
</g>
<g >
<title>runtime.bucketShift (8 samples, 0.06%)</title><rect x="608.4" y="197" width="0.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="611.45" y="207.5" ></text>
</g>
<g >
<title>runtime/pprof.profileWriter (3 samples, 0.02%)</title><rect x="1189.7" y="213" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1192.72" y="223.5" ></text>
</g>
<g >
<title>runtime.notewakeup (54 samples, 0.43%)</title><rect x="1140.4" y="133" width="5.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1143.43" y="143.5" ></text>
</g>
<g >
<title>runtime.preemptone (2 samples, 0.02%)</title><rect x="1065.8" y="117" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1068.80" y="127.5" ></text>
</g>
<g >
<title>runtime.pidleget (4 samples, 0.03%)</title><rect x="1140.1" y="133" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1143.06" y="143.5" ></text>
</g>
<g >
<title>runtime.unlock2 (2 samples, 0.02%)</title><rect x="1139.9" y="149" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1142.87" y="159.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (16 samples, 0.13%)</title><rect x="995.8" y="197" width="1.5" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="998.77" y="207.5" ></text>
</g>
<g >
<title>runtime.preemptone (4 samples, 0.03%)</title><rect x="1185.6" y="101" width="0.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1188.59" y="111.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (15 samples, 0.12%)</title><rect x="1128.7" y="181" width="1.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1131.70" y="191.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (114 samples, 0.91%)</title><rect x="1022.1" y="165" width="10.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1025.06" y="175.5" ></text>
</g>
<g >
<title>runtime.(*gcBits).bitp (4 samples, 0.03%)</title><rect x="1091.1" y="133" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1094.06" y="143.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (16 samples, 0.13%)</title><rect x="1128.6" y="197" width="1.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1131.61" y="207.5" ></text>
</g>
<g >
<title>runtime.findRunnable (18 samples, 0.14%)</title><rect x="1130.2" y="165" width="1.7" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1133.20" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2 (5 samples, 0.04%)</title><rect x="1138.3" y="133" width="0.4" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1141.28" y="143.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (5 samples, 0.04%)</title><rect x="1138.3" y="149" width="0.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1141.28" y="159.5" ></text>
</g>
<g >
<title>runtime.osyield (3 samples, 0.02%)</title><rect x="1162.4" y="85" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1165.40" y="95.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (3 samples, 0.02%)</title><rect x="25.7" y="181" width="0.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="28.68" y="191.5" ></text>
</g>
<g >
<title>runtime.scanobject (9 samples, 0.07%)</title><rect x="999.1" y="69" width="0.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1002.06" y="79.5" ></text>
</g>
<g >
<title>runtime.schedule (83 samples, 0.66%)</title><rect x="1132.1" y="165" width="7.8" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1135.08" y="175.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (15 samples, 0.12%)</title><rect x="1161.3" y="133" width="1.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1164.27" y="143.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (6 samples, 0.05%)</title><rect x="1175.6" y="101" width="0.6" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1178.64" y="111.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (15 samples, 0.12%)</title><rect x="1161.3" y="101" width="1.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1164.27" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfUnchecked (6 samples, 0.05%)</title><rect x="1092.0" y="133" width="0.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1095.00" y="143.5" ></text>
</g>
<g >
<title>runtime.preemptM (4 samples, 0.03%)</title><rect x="1188.9" y="133" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1191.87" y="143.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (4 samples, 0.03%)</title><rect x="1185.6" y="117" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1188.59" y="127.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (15 samples, 0.12%)</title><rect x="1128.7" y="133" width="1.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1131.70" y="143.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint64).Add (2 samples, 0.02%)</title><rect x="743.0" y="101" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="745.97" y="111.5" ></text>
</g>
<g >
<title>runtime.osyield (24 samples, 0.19%)</title><rect x="1173.4" y="101" width="2.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1176.38" y="111.5" ></text>
</g>
<g >
<title>runtime.semasleep (12 samples, 0.10%)</title><rect x="1161.3" y="69" width="1.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1164.27" y="79.5" ></text>
</g>
<g >
<title>runtime.runOneTimer (2 samples, 0.02%)</title><rect x="1136.7" y="101" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1139.68" y="111.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (3 samples, 0.02%)</title><rect x="1184.8" y="85" width="0.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1187.84" y="95.5" ></text>
</g>
<g >
<title>runtime.greyobject (2 samples, 0.02%)</title><rect x="1100.7" y="133" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1103.73" y="143.5" ></text>
</g>
<g >
<title>github.com/zeebo/xxh3.xxh3Avalanche (54 samples, 0.43%)</title><rect x="45.4" y="197" width="5.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="48.39" y="207.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (13 samples, 0.10%)</title><rect x="1158.8" y="149" width="1.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1161.83" y="159.5" ></text>
</g>
<g >
<title>runtime.gcDrain (654 samples, 5.20%)</title><rect x="1065.1" y="165" width="61.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1068.15" y="175.5" >runtim..</text>
</g>
<g >
<title>runtime.findObject (3 samples, 0.02%)</title><rect x="1127.2" y="133" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1130.20" y="143.5" ></text>
</g>
<g >
<title>runtime.suspendG (5 samples, 0.04%)</title><rect x="1186.2" y="133" width="0.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.15" y="143.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (110 samples, 0.88%)</title><rect x="1022.4" y="117" width="10.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1025.43" y="127.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (2 samples, 0.02%)</title><rect x="1065.8" y="133" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1068.80" y="143.5" ></text>
</g>
<g >
<title>runtime.spanOf (83 samples, 0.66%)</title><rect x="1101.2" y="133" width="7.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1104.19" y="143.5" ></text>
</g>
</g>
</svg>
