<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>brc/pkg.(*TrieNode).Get (57,182 samples, 63.87%)</title><rect x="206.6" y="213" width="753.7" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="209.60" y="223.5" >brc/pkg.(*TrieNode).Get</text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Insert (9 samples, 0.01%)</title><rect x="1067.9" y="245" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1070.92" y="255.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).allocRange (32 samples, 0.04%)</title><rect x="1118.0" y="117" width="0.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1121.05" y="127.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerIdle (442 samples, 0.49%)</title><rect x="1150.9" y="229" width="5.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1153.95" y="239.5" ></text>
</g>
<g >
<title>runtime.wakep (177 samples, 0.20%)</title><rect x="1171.0" y="213" width="2.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1173.99" y="223.5" ></text>
</g>
<g >
<title>brc/pkg.commonPrefix (221 samples, 0.25%)</title><rect x="727.9" y="117" width="2.9" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="730.91" y="127.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (41 samples, 0.05%)</title><rect x="1157.9" y="197" width="0.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1160.93" y="207.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Get (1,009 samples, 1.13%)</title><rect x="714.6" y="117" width="13.3" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="717.61" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (16 samples, 0.02%)</title><rect x="1119.7" y="181" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1122.71" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (647 samples, 0.72%)</title><rect x="1177.6" y="213" width="8.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1180.56" y="223.5" ></text>
</g>
<g >
<title>runtime.lock2 (25 samples, 0.03%)</title><rect x="1186.1" y="149" width="0.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1189.09" y="159.5" ></text>
</g>
<g >
<title>runtime.osyield (13 samples, 0.01%)</title><rect x="1177.2" y="213" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1180.20" y="223.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (97 samples, 0.11%)</title><rect x="1114.9" y="229" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1117.94" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (179 samples, 0.20%)</title><rect x="1117.1" y="165" width="2.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1120.07" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (25 samples, 0.03%)</title><rect x="1186.1" y="117" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1189.09" y="127.5" ></text>
</g>
<g >
<title>runtime.semawakeup (81 samples, 0.09%)</title><rect x="1168.8" y="149" width="1.0" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1171.77" y="159.5" ></text>
</g>
<g >
<title>runtime.recv.goready.func1 (27 samples, 0.03%)</title><rect x="1084.7" y="181" width="0.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1087.71" y="191.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Get (2,246 samples, 2.51%)</title><rect x="701.4" y="133" width="29.6" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="704.37" y="143.5" >br..</text>
</g>
<g >
<title>brc/pkg.(*CityData).MergeValue (9,468 samples, 10.58%)</title><rect x="10.0" y="261" width="124.8" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >brc/pkg.(*CityD..</text>
</g>
<g >
<title>runtime.gopreempt_m (479 samples, 0.54%)</title><rect x="1170.1" y="245" width="6.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1173.07" y="255.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (19 samples, 0.02%)</title><rect x="1186.5" y="149" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1189.47" y="159.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Iter (20 samples, 0.02%)</title><rect x="1156.8" y="181" width="0.2" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1159.78" y="191.5" ></text>
</g>
<g >
<title>internal/bytealg.IndexByte (72 samples, 0.08%)</title><rect x="1103.8" y="213" width="1.0" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1106.81" y="223.5" ></text>
</g>
<g >
<title>runtime.startm (102 samples, 0.11%)</title><rect x="1188.6" y="197" width="1.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1191.63" y="207.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Get (493 samples, 0.55%)</title><rect x="719.8" y="101" width="6.5" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="722.85" y="111.5" ></text>
</g>
<g >
<title>runtime.makeslice (537 samples, 0.60%)</title><rect x="1116.8" y="245" width="7.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1119.81" y="255.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Get (69,206 samples, 77.30%)</title><rect x="155.7" y="245" width="912.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="158.74" y="255.5" >brc/pkg.(*TrieNode).Get</text>
</g>
<g >
<title>runtime.lockWithRank (446 samples, 0.50%)</title><rect x="1177.6" y="165" width="5.8" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1180.56" y="175.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Iter (20 samples, 0.02%)</title><rect x="1156.8" y="213" width="0.2" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1159.78" y="223.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (28 samples, 0.03%)</title><rect x="1186.1" y="165" width="0.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1189.09" y="175.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (9 samples, 0.01%)</title><rect x="1150.8" y="197" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1153.83" y="207.5" ></text>
</g>
<g >
<title>bytes.Equal (102 samples, 0.11%)</title><rect x="751.2" y="149" width="1.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="754.18" y="159.5" ></text>
</g>
<g >
<title>bytes.Equal (11 samples, 0.01%)</title><rect x="730.8" y="117" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="733.82" y="127.5" ></text>
</g>
<g >
<title>runtime.spanOf (98 samples, 0.11%)</title><rect x="1147.4" y="181" width="1.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1150.44" y="191.5" ></text>
</g>
<g >
<title>bytes.Equal (27 samples, 0.03%)</title><rect x="959.9" y="197" width="0.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="962.89" y="207.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (10 samples, 0.01%)</title><rect x="1168.5" y="197" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1171.54" y="207.5" ></text>
</g>
<g >
<title>all (89,525 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>runtime.lock2 (12 samples, 0.01%)</title><rect x="1125.5" y="133" width="0.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1128.48" y="143.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (11 samples, 0.01%)</title><rect x="1118.1" y="101" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1121.06" y="111.5" ></text>
</g>
<g >
<title>gcWriteBarrier (131 samples, 0.15%)</title><rect x="1114.5" y="245" width="1.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1117.49" y="255.5" ></text>
</g>
<g >
<title>memeqbody (18 samples, 0.02%)</title><rect x="960.0" y="181" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="962.98" y="191.5" ></text>
</g>
<g >
<title>runtime.scanobject (425 samples, 0.47%)</title><rect x="1151.0" y="197" width="5.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1154.04" y="207.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (95 samples, 0.11%)</title><rect x="1115.0" y="197" width="1.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1117.96" y="207.5" ></text>
</g>
<g >
<title>runtime.wakep (102 samples, 0.11%)</title><rect x="1188.6" y="213" width="1.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1191.63" y="223.5" ></text>
</g>
<g >
<title>runtime.findObject (38 samples, 0.04%)</title><rect x="1115.5" y="165" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1118.48" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (13 samples, 0.01%)</title><rect x="1177.2" y="197" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1180.20" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (163 samples, 0.18%)</title><rect x="1117.1" y="149" width="2.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1120.10" y="159.5" ></text>
</g>
<g >
<title>runtime.main (23 samples, 0.03%)</title><rect x="1156.8" y="261" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1159.77" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (535 samples, 0.60%)</title><rect x="1116.8" y="229" width="7.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1119.83" y="239.5" ></text>
</g>
<g >
<title>runtime.osyield (646 samples, 0.72%)</title><rect x="1159.3" y="165" width="8.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1162.34" y="175.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Get (5,047 samples, 5.64%)</title><rect x="671.0" y="149" width="66.6" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="674.04" y="159.5" >brc/pkg..</text>
</g>
<g >
<title>runtime.runqgrab (21 samples, 0.02%)</title><rect x="1167.9" y="165" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1170.86" y="175.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (15 samples, 0.02%)</title><rect x="1156.4" y="181" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1159.40" y="191.5" ></text>
</g>
<g >
<title>brc/pkg.commonPrefix (56 samples, 0.06%)</title><rect x="725.6" y="85" width="0.7" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="728.58" y="95.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (8 samples, 0.01%)</title><rect x="1157.1" y="245" width="0.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1160.09" y="255.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).tryGetFast (12 samples, 0.01%)</title><rect x="1124.9" y="213" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1127.91" y="223.5" ></text>
</g>
<g >
<title>memeqbody (12 samples, 0.01%)</title><rect x="737.3" y="117" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="740.34" y="127.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (10 samples, 0.01%)</title><rect x="1168.4" y="213" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1171.41" y="223.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (16 samples, 0.02%)</title><rect x="1125.5" y="197" width="0.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1128.47" y="207.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (36 samples, 0.04%)</title><rect x="1150.4" y="197" width="0.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1153.35" y="207.5" ></text>
</g>
<g >
<title>runtime.mcall (981 samples, 1.10%)</title><rect x="1157.1" y="261" width="12.9" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1160.07" y="271.5" ></text>
</g>
<g >
<title>memeqbody (70 samples, 0.08%)</title><rect x="857.6" y="165" width="1.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="860.64" y="175.5" ></text>
</g>
<g >
<title>runtime.osyield (82 samples, 0.09%)</title><rect x="1182.4" y="149" width="1.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1185.36" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (80 samples, 0.09%)</title><rect x="1168.8" y="133" width="1.0" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1171.78" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfUnchecked (41 samples, 0.05%)</title><rect x="1154.2" y="181" width="0.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1157.20" y="191.5" ></text>
</g>
<g >
<title>runtime.bgsweep (69 samples, 0.08%)</title><rect x="1124.0" y="261" width="0.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1126.95" y="271.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (696 samples, 0.78%)</title><rect x="1177.6" y="245" width="9.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1180.56" y="255.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerIdle (103 samples, 0.12%)</title><rect x="1186.7" y="245" width="1.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1189.73" y="255.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Iter (11 samples, 0.01%)</title><rect x="1156.8" y="149" width="0.2" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1159.84" y="159.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Iter (20 samples, 0.02%)</title><rect x="1156.8" y="229" width="0.2" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1159.78" y="239.5" ></text>
</g>
<g >
<title>main.MapData.func1.1 (70,666 samples, 78.93%)</title><rect x="153.9" y="261" width="931.4" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="156.89" y="271.5" >main.MapData.func1.1</text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Get (42,429 samples, 47.39%)</title><rect x="299.5" y="197" width="559.3" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="302.53" y="207.5" >brc/pkg.(*TrieNode).Get</text>
</g>
<g >
<title>runtime.stealWork (711 samples, 0.79%)</title><rect x="1158.9" y="197" width="9.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1161.85" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (37 samples, 0.04%)</title><rect x="1158.0" y="165" width="0.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1160.98" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2 (48 samples, 0.05%)</title><rect x="1176.6" y="213" width="0.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1179.57" y="223.5" ></text>
</g>
<g >
<title>runtime.unpackScavChunkData (9 samples, 0.01%)</title><rect x="1118.3" y="101" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1121.35" y="111.5" ></text>
</g>
<g >
<title>bytes.IndexByte (1,448 samples, 1.62%)</title><rect x="134.8" y="261" width="19.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="137.79" y="271.5" ></text>
</g>
<g >
<title>runtime.greyobject (40 samples, 0.04%)</title><rect x="1146.4" y="181" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1149.44" y="191.5" ></text>
</g>
<g >
<title>runtime.morestack (484 samples, 0.54%)</title><rect x="1170.0" y="261" width="6.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1173.00" y="271.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (102 samples, 0.11%)</title><rect x="1188.6" y="149" width="1.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1191.63" y="159.5" ></text>
</g>
<g >
<title>runtime.procyield (37 samples, 0.04%)</title><rect x="1173.4" y="197" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1176.35" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (69 samples, 0.08%)</title><rect x="1176.6" y="245" width="0.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1179.57" y="255.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (16 samples, 0.02%)</title><rect x="1141.4" y="181" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1144.38" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (41 samples, 0.05%)</title><rect x="1157.9" y="181" width="0.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1160.93" y="191.5" ></text>
</g>
<g >
<title>runtime.ready (108 samples, 0.12%)</title><rect x="1188.6" y="229" width="1.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1191.55" y="239.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (16 samples, 0.02%)</title><rect x="1119.7" y="133" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1122.71" y="143.5" ></text>
</g>
<g >
<title>runtime.chanrecv (40 samples, 0.04%)</title><rect x="1084.7" y="229" width="0.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1087.66" y="239.5" ></text>
</g>
<g >
<title>brc/pkg.commonPrefix (5,927 samples, 6.62%)</title><rect x="960.3" y="213" width="78.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="963.30" y="223.5" >brc/pkg.c..</text>
</g>
<g >
<title>runtime.stdcall0 (12 samples, 0.01%)</title><rect x="1187.7" y="117" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1190.69" y="127.5" ></text>
</g>
<g >
<title>runtime.lock2 (8 samples, 0.01%)</title><rect x="1116.6" y="213" width="0.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1119.62" y="223.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Get (24,503 samples, 27.37%)</title><rect x="464.0" y="181" width="323.0" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="467.01" y="191.5" >brc/pkg.(*TrieNode).Get</text>
</g>
<g >
<title>internal/bytealg.IndexByte (60 samples, 0.07%)</title><rect x="1113.7" y="229" width="0.8" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1116.70" y="239.5" ></text>
</g>
<g >
<title>runtime.memequal (12 samples, 0.01%)</title><rect x="858.6" y="165" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="861.56" y="175.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (226 samples, 0.25%)</title><rect x="1173.4" y="229" width="2.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1176.35" y="239.5" ></text>
</g>
<g >
<title>runtime.chansend1 (39 samples, 0.04%)</title><rect x="1116.2" y="245" width="0.5" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1119.21" y="255.5" ></text>
</g>
<g >
<title>runtime.preemptM (17 samples, 0.02%)</title><rect x="1187.9" y="165" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1190.85" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2 (364 samples, 0.41%)</title><rect x="1177.6" y="149" width="4.8" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1180.56" y="159.5" ></text>
</g>
<g >
<title>main.main (22 samples, 0.02%)</title><rect x="1156.8" y="245" width="0.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1159.78" y="255.5" ></text>
</g>
<g >
<title>runtime.scanobject (1,840 samples, 2.06%)</title><rect x="1125.9" y="197" width="24.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1128.92" y="207.5" >r..</text>
</g>
<g >
<title>runtime.pidleput (10 samples, 0.01%)</title><rect x="1158.7" y="197" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1161.71" y="207.5" ></text>
</g>
<g >
<title>internal/bytealg.IndexByte (79 samples, 0.09%)</title><rect x="152.8" y="245" width="1.1" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="155.84" y="255.5" ></text>
</g>
<g >
<title>brc/pkg.commonPrefix (29 samples, 0.03%)</title><rect x="725.2" y="69" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="728.20" y="79.5" ></text>
</g>
<g >
<title>memeqbody (67 samples, 0.07%)</title><rect x="751.5" y="133" width="0.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="754.48" y="143.5" ></text>
</g>
<g >
<title>brc/pkg.commonPrefix (5,326 samples, 5.95%)</title><rect x="787.0" y="181" width="70.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="789.97" y="191.5" >brc/pkg..</text>
</g>
<g >
<title>brc/pkg.commonPrefix (473 samples, 0.53%)</title><rect x="731.0" y="133" width="6.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="733.97" y="143.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Get (11,450 samples, 12.79%)</title><rect x="601.6" y="165" width="150.9" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="604.63" y="175.5" >brc/pkg.(*TrieNode)..</text>
</g>
<g >
<title>runtime.stdcall2 (183 samples, 0.20%)</title><rect x="1173.8" y="181" width="2.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1176.84" y="191.5" ></text>
</g>
<g >
<title>runtime.forEachPInternal (23 samples, 0.03%)</title><rect x="1188.1" y="229" width="0.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1191.09" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (1,031 samples, 1.15%)</title><rect x="1176.4" y="261" width="13.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1179.38" y="271.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (49 samples, 0.05%)</title><rect x="1186.1" y="197" width="0.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1189.09" y="207.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (85 samples, 0.09%)</title><rect x="1186.7" y="165" width="1.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1189.73" y="175.5" ></text>
</g>
<g >
<title>brc/pkg.SplitParse (1,129 samples, 1.26%)</title><rect x="1089.9" y="245" width="14.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1092.88" y="255.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (12 samples, 0.01%)</title><rect x="1187.7" y="133" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1190.69" y="143.5" ></text>
</g>
<g >
<title>brc/pkg.commonPrefix (111 samples, 0.12%)</title><rect x="726.3" y="101" width="1.5" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="729.34" y="111.5" ></text>
</g>
<g >
<title>runtime.spanOf (17 samples, 0.02%)</title><rect x="1156.2" y="181" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1159.18" y="191.5" ></text>
</g>
<g >
<title>brc/pkg.commonPrefix (7,672 samples, 8.57%)</title><rect x="858.8" y="197" width="101.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="861.77" y="207.5" >brc/pkg.comm..</text>
</g>
<g >
<title>runtime.wbBufFlush1 (93 samples, 0.10%)</title><rect x="1115.0" y="181" width="1.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1117.99" y="191.5" ></text>
</g>
<g >
<title>runtime.semasleep (25 samples, 0.03%)</title><rect x="1186.1" y="133" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1189.09" y="143.5" ></text>
</g>
<g >
<title>runtime.findRunnable (43 samples, 0.05%)</title><rect x="1170.3" y="197" width="0.5" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1173.28" y="207.5" ></text>
</g>
<g >
<title>runtime.schedule (67 samples, 0.07%)</title><rect x="1170.1" y="213" width="0.9" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1173.10" y="223.5" ></text>
</g>
<g >
<title>memeqbody (98 samples, 0.11%)</title><rect x="785.3" y="149" width="1.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="788.34" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mspan).heapBitsSmallForAddr (38 samples, 0.04%)</title><rect x="1154.2" y="165" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1157.24" y="175.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (61 samples, 0.07%)</title><rect x="1176.6" y="229" width="0.8" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1179.57" y="239.5" ></text>
</g>
<g >
<title>runtime.gcDrain (696 samples, 0.78%)</title><rect x="1177.6" y="229" width="9.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1180.56" y="239.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Get (16 samples, 0.02%)</title><rect x="724.7" y="37" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="727.66" y="47.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (103 samples, 0.12%)</title><rect x="1186.7" y="213" width="1.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1189.73" y="223.5" ></text>
</g>
<g >
<title>bytes.IndexByte (738 samples, 0.82%)</title><rect x="1104.8" y="245" width="9.7" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1107.76" y="255.5" ></text>
</g>
<g >
<title>runtime.gcDrain (103 samples, 0.12%)</title><rect x="1186.7" y="229" width="1.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1189.73" y="239.5" ></text>
</g>
<g >
<title>runtime.osyield (12 samples, 0.01%)</title><rect x="1187.7" y="149" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1190.69" y="159.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (150 samples, 0.17%)</title><rect x="1184.0" y="149" width="1.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1186.95" y="159.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).putFast (16 samples, 0.02%)</title><rect x="1134.7" y="181" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1137.71" y="191.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).alloc (63 samples, 0.07%)</title><rect x="1118.0" y="133" width="0.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1121.02" y="143.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (103 samples, 0.12%)</title><rect x="1186.7" y="197" width="1.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1189.73" y="207.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (82 samples, 0.09%)</title><rect x="1182.4" y="117" width="1.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1185.36" y="127.5" ></text>
</g>
<g >
<title>indexbytebody (1,284 samples, 1.43%)</title><rect x="135.9" y="245" width="16.9" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="138.91" y="255.5" ></text>
</g>
<g >
<title>runtime.stdcall7 (10 samples, 0.01%)</title><rect x="1185.9" y="149" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1188.93" y="159.5" ></text>
</g>
<g >
<title>runtime.gcDrain (1,963 samples, 2.19%)</title><rect x="1125.1" y="213" width="25.8" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1128.07" y="223.5" >r..</text>
</g>
<g >
<title>runtime.findObject (368 samples, 0.41%)</title><rect x="1141.6" y="181" width="4.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1144.59" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (39 samples, 0.04%)</title><rect x="1117.5" y="133" width="0.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1120.49" y="143.5" ></text>
</g>
<g >
<title>runtime.pMask.read (13 samples, 0.01%)</title><rect x="1158.5" y="197" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1161.54" y="207.5" ></text>
</g>
<g >
<title>runtime.scanobject (16 samples, 0.02%)</title><rect x="1119.7" y="117" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1122.71" y="127.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Get (65,675 samples, 73.36%)</title><rect x="172.8" y="229" width="865.7" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="175.83" y="239.5" >brc/pkg.(*TrieNode).Get</text>
</g>
<g >
<title>runtime.stealWork (10 samples, 0.01%)</title><rect x="1170.7" y="181" width="0.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1173.70" y="191.5" ></text>
</g>
<g >
<title>runtime.spanOf (18 samples, 0.02%)</title><rect x="1116.0" y="165" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1118.98" y="175.5" ></text>
</g>
<g >
<title>brc/pkg.commonPrefix (1,033 samples, 1.15%)</title><rect x="737.6" y="149" width="13.6" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="740.56" y="159.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Get (119 samples, 0.13%)</title><rect x="723.6" y="69" width="1.6" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="726.63" y="79.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (2,421 samples, 2.70%)</title><rect x="1124.9" y="261" width="31.9" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1127.86" y="271.5" >ru..</text>
</g>
<g >
<title>runtime.wakep (87 samples, 0.10%)</title><rect x="1168.7" y="197" width="1.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1171.69" y="207.5" ></text>
</g>
<g >
<title>runtime.notewakeup (81 samples, 0.09%)</title><rect x="1168.8" y="165" width="1.0" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1171.77" y="175.5" ></text>
</g>
<g >
<title>runtime.gopark (12 samples, 0.01%)</title><rect x="1116.4" y="213" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1119.40" y="223.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (1,975 samples, 2.21%)</title><rect x="1124.9" y="229" width="26.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1127.91" y="239.5" >r..</text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (647 samples, 0.72%)</title><rect x="1177.6" y="197" width="8.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1180.56" y="207.5" ></text>
</g>
<g >
<title>runtime.greyobject (11 samples, 0.01%)</title><rect x="1155.9" y="181" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1158.93" y="191.5" ></text>
</g>
<g >
<title>runtime.chanrecv2 (46 samples, 0.05%)</title><rect x="1084.6" y="245" width="0.6" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1087.62" y="255.5" ></text>
</g>
<g >
<title>brc/pkg.ParseIndec (416 samples, 0.46%)</title><rect x="1092.6" y="229" width="5.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1095.65" y="239.5" ></text>
</g>
<g >
<title>runtime.memequal (14 samples, 0.02%)</title><rect x="786.6" y="149" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="789.63" y="159.5" ></text>
</g>
<g >
<title>bytes.Equal (117 samples, 0.13%)</title><rect x="857.2" y="181" width="1.5" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="860.17" y="191.5" ></text>
</g>
<g >
<title>indexbytebody (561 samples, 0.63%)</title><rect x="1106.3" y="229" width="7.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1109.30" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocMSpanLocked (17 samples, 0.02%)</title><rect x="1117.3" y="133" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1120.27" y="143.5" ></text>
</g>
<g >
<title>runtime.park_m (972 samples, 1.09%)</title><rect x="1157.2" y="245" width="12.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1160.19" y="255.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (13 samples, 0.01%)</title><rect x="1177.2" y="181" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1180.20" y="191.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (16 samples, 0.02%)</title><rect x="1119.7" y="149" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1122.71" y="159.5" ></text>
</g>
<g >
<title>runtime.semasleep (364 samples, 0.41%)</title><rect x="1177.6" y="133" width="4.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1180.56" y="143.5" ></text>
</g>
<g >
<title>runtime.markroot (49 samples, 0.05%)</title><rect x="1186.1" y="213" width="0.6" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1189.09" y="223.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.forEachP.func5 (23 samples, 0.03%)</title><rect x="1188.1" y="245" width="0.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1191.09" y="255.5" ></text>
</g>
<g >
<title>bytes.Equal (25 samples, 0.03%)</title><rect x="737.2" y="133" width="0.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="740.20" y="143.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Get (262 samples, 0.29%)</title><rect x="722.1" y="85" width="3.5" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="725.13" y="95.5" ></text>
</g>
<g >
<title>runtime.procyield (12 samples, 0.01%)</title><rect x="1125.5" y="117" width="0.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1128.48" y="127.5" ></text>
</g>
<g >
<title>runtime.pageIndexOf (14 samples, 0.02%)</title><rect x="1147.2" y="181" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1150.18" y="191.5" ></text>
</g>
<g >
<title>runtime.chansend (30 samples, 0.03%)</title><rect x="1116.2" y="229" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1119.23" y="239.5" ></text>
</g>
<g >
<title>runtime.stdcall0 (642 samples, 0.72%)</title><rect x="1159.4" y="133" width="8.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1162.39" y="143.5" ></text>
</g>
<g >
<title>indexbytebody (368 samples, 0.41%)</title><rect x="1099.0" y="213" width="4.8" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1101.96" y="223.5" ></text>
</g>
<g >
<title>runtime.markBits.isMarked (16 samples, 0.02%)</title><rect x="1147.0" y="181" width="0.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1149.97" y="191.5" ></text>
</g>
<g >
<title>runtime.notewakeup (102 samples, 0.11%)</title><rect x="1188.6" y="181" width="1.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1191.63" y="191.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (16 samples, 0.02%)</title><rect x="1119.7" y="165" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1122.71" y="175.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).find (22 samples, 0.02%)</title><rect x="1118.5" y="117" width="0.3" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="1121.48" y="127.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (9 samples, 0.01%)</title><rect x="1150.8" y="181" width="0.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1153.83" y="191.5" ></text>
</g>
<g >
<title>runtime.semasleep (48 samples, 0.05%)</title><rect x="1176.6" y="197" width="0.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1179.57" y="207.5" ></text>
</g>
<g >
<title>runtime.preemptM (20 samples, 0.02%)</title><rect x="1186.5" y="165" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1189.45" y="175.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).push (9 samples, 0.01%)</title><rect x="1119.4" y="197" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1122.43" y="207.5" ></text>
</g>
<g >
<title>brc/pkg.commonPrefix (1,258 samples, 1.41%)</title><rect x="1068.0" y="245" width="16.6" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1071.04" y="255.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (37 samples, 0.04%)</title><rect x="1158.0" y="149" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1160.98" y="159.5" ></text>
</g>
<g >
<title>runtime.findRunnable (830 samples, 0.93%)</title><rect x="1157.5" y="213" width="10.9" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1160.47" y="223.5" ></text>
</g>
<g >
<title>runtime.preemptone (13 samples, 0.01%)</title><rect x="1125.5" y="165" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1128.48" y="175.5" ></text>
</g>
<g >
<title>runtime.suspendG (49 samples, 0.05%)</title><rect x="1186.1" y="181" width="0.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.09" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (2,418 samples, 2.70%)</title><rect x="1124.9" y="245" width="31.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1127.90" y="255.5" >ru..</text>
</g>
<g >
<title>runtime.gcAssistAlloc (16 samples, 0.02%)</title><rect x="1119.7" y="197" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1122.71" y="207.5" ></text>
</g>
<g >
<title>runtime.checkTimers (11 samples, 0.01%)</title><rect x="1159.1" y="181" width="0.2" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="1162.14" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (183 samples, 0.20%)</title><rect x="1117.0" y="197" width="2.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1120.02" y="207.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Iter (20 samples, 0.02%)</title><rect x="1156.8" y="197" width="0.2" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1159.78" y="207.5" ></text>
</g>
<g >
<title>runtime.(*fixalloc).alloc (11 samples, 0.01%)</title><rect x="1117.3" y="117" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1120.35" y="127.5" ></text>
</g>
<g >
<title>runtime.semasleep (183 samples, 0.20%)</title><rect x="1173.8" y="197" width="2.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1176.84" y="207.5" ></text>
</g>
<g >
<title>runtime.ready (24 samples, 0.03%)</title><rect x="1084.8" y="165" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1087.75" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mspan).init (26 samples, 0.03%)</title><rect x="1117.6" y="117" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1120.64" y="127.5" ></text>
</g>
<g >
<title>runtime.schedule (962 samples, 1.07%)</title><rect x="1157.3" y="229" width="12.7" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1160.29" y="239.5" ></text>
</g>
<g >
<title>runtime.preemptall (23 samples, 0.03%)</title><rect x="1188.1" y="213" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1191.09" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (169 samples, 0.19%)</title><rect x="1171.1" y="149" width="2.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1174.10" y="159.5" ></text>
</g>
<g >
<title>runtime.startm (171 samples, 0.19%)</title><rect x="1171.1" y="197" width="2.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1174.07" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mspan).heapBitsSmallForAddr (209 samples, 0.23%)</title><rect x="1138.5" y="165" width="2.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1141.46" y="175.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (16 samples, 0.02%)</title><rect x="1187.9" y="149" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1190.86" y="159.5" ></text>
</g>
<g >
<title>runtime.lock2 (10 samples, 0.01%)</title><rect x="1168.4" y="197" width="0.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1171.41" y="207.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (17 samples, 0.02%)</title><rect x="1119.7" y="213" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1122.71" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (48 samples, 0.05%)</title><rect x="1176.6" y="181" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1179.57" y="191.5" ></text>
</g>
<g >
<title>runtime.preemptM (199 samples, 0.22%)</title><rect x="1183.4" y="165" width="2.7" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1186.44" y="175.5" ></text>
</g>
<g >
<title>runtime.goready (31 samples, 0.03%)</title><rect x="1084.7" y="213" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1087.66" y="223.5" ></text>
</g>
<g >
<title>runtime.spanOfUnchecked (14 samples, 0.02%)</title><rect x="1150.2" y="197" width="0.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1153.17" y="207.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Iter (8 samples, 0.01%)</title><rect x="1156.9" y="133" width="0.1" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1159.85" y="143.5" ></text>
</g>
<g >
<title>main.ParseBlocks.func1.1 (2,926 samples, 3.27%)</title><rect x="1085.3" y="261" width="38.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1088.32" y="271.5" >mai..</text>
</g>
<g >
<title>runtime.memequal (12 samples, 0.01%)</title><rect x="752.4" y="133" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="755.36" y="143.5" ></text>
</g>
<g >
<title>runtime.(*gcBits).bitp (279 samples, 0.31%)</title><rect x="1131.0" y="181" width="3.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1134.02" y="191.5" ></text>
</g>
<g >
<title>runtime.preemptone (103 samples, 0.12%)</title><rect x="1186.7" y="181" width="1.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1189.73" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (180 samples, 0.20%)</title><rect x="1117.1" y="181" width="2.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1120.06" y="191.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (12 samples, 0.01%)</title><rect x="1125.5" y="149" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1128.48" y="159.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (249 samples, 0.28%)</title><rect x="1170.1" y="229" width="3.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1173.07" y="239.5" ></text>
</g>
<g >
<title>runtime.semasleep (73 samples, 0.08%)</title><rect x="1186.7" y="133" width="1.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1189.73" y="143.5" ></text>
</g>
<g >
<title>runtime.lock2 (10 samples, 0.01%)</title><rect x="1168.5" y="181" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1171.54" y="191.5" ></text>
</g>
<g >
<title>brc/pkg.commonPrefix (18 samples, 0.02%)</title><rect x="725.0" y="53" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="727.96" y="63.5" ></text>
</g>
<g >
<title>bytes.Equal (166 samples, 0.19%)</title><rect x="784.6" y="165" width="2.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="787.63" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2 (73 samples, 0.08%)</title><rect x="1186.7" y="149" width="1.0" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1189.73" y="159.5" ></text>
</g>
<g >
<title>runtime.resetspinning (98 samples, 0.11%)</title><rect x="1168.5" y="213" width="1.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1171.54" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (95 samples, 0.11%)</title><rect x="1115.0" y="213" width="1.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1117.96" y="223.5" ></text>
</g>
<g >
<title>runtime.runqsteal (671 samples, 0.75%)</title><rect x="1159.3" y="181" width="8.8" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1162.29" y="191.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (89 samples, 0.10%)</title><rect x="1148.7" y="181" width="1.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1151.73" y="191.5" ></text>
</g>
<g >
<title>brc/pkg.commonPrefix (2,434 samples, 2.72%)</title><rect x="752.5" y="165" width="32.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="755.55" y="175.5" >br..</text>
</g>
<g >
<title>runtime.sweepone (68 samples, 0.08%)</title><rect x="1124.0" y="245" width="0.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1126.96" y="255.5" ></text>
</g>
<g >
<title>runtime.findObject (86 samples, 0.10%)</title><rect x="1154.8" y="181" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1157.79" y="191.5" ></text>
</g>
<g >
<title>runtime.preemptone (647 samples, 0.72%)</title><rect x="1177.6" y="181" width="8.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1180.56" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcache).allocLarge (209 samples, 0.23%)</title><rect x="1117.0" y="213" width="2.7" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1119.95" y="223.5" ></text>
</g>
<g >
<title>runtime.gcDrain (441 samples, 0.49%)</title><rect x="1151.0" y="213" width="5.8" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1153.96" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (13 samples, 0.01%)</title><rect x="1188.2" y="165" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1191.18" y="175.5" ></text>
</g>
<g >
<title>runtime.semawakeup (102 samples, 0.11%)</title><rect x="1188.6" y="165" width="1.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1191.63" y="175.5" ></text>
</g>
<g >
<title>runtime.notewakeup (170 samples, 0.19%)</title><rect x="1171.1" y="181" width="2.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1174.09" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (364 samples, 0.41%)</title><rect x="1177.6" y="117" width="4.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1180.56" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfUnchecked (223 samples, 0.25%)</title><rect x="1138.3" y="181" width="3.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1141.33" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2.osyield.func1 (82 samples, 0.09%)</title><rect x="1182.4" y="133" width="1.0" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1185.36" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (31 samples, 0.03%)</title><rect x="1084.7" y="197" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1087.66" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (252 samples, 0.28%)</title><rect x="1134.9" y="181" width="3.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1137.93" y="191.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (8 samples, 0.01%)</title><rect x="1156.7" y="197" width="0.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1159.67" y="207.5" ></text>
</g>
<g >
<title>bytes.IndexByte (503 samples, 0.56%)</title><rect x="1098.1" y="229" width="6.7" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1101.13" y="239.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (8 samples, 0.01%)</title><rect x="1116.6" y="229" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1119.62" y="239.5" ></text>
</g>
<g >
<title>brc/pkg.commonPrefix (2,232 samples, 2.49%)</title><rect x="1038.5" y="229" width="29.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1041.47" y="239.5" >br..</text>
</g>
<g >
<title>runtime.runqgrab.osyield.func1 (646 samples, 0.72%)</title><rect x="1159.3" y="149" width="8.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1162.34" y="159.5" ></text>
</g>
<g >
<title>runtime.startm (83 samples, 0.09%)</title><rect x="1168.7" y="181" width="1.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1171.74" y="191.5" ></text>
</g>
<g >
<title>runtime.semawakeup (169 samples, 0.19%)</title><rect x="1171.1" y="165" width="2.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1174.10" y="175.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Get (45 samples, 0.05%)</title><rect x="724.4" y="53" width="0.6" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="727.37" y="63.5" ></text>
</g>
<g >
<title>runtime.(*gcBits).bitp (83 samples, 0.09%)</title><rect x="1152.1" y="181" width="1.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1155.12" y="191.5" ></text>
</g>
<g >
<title>brc/pkg.(*TrieNode).Iter (17 samples, 0.02%)</title><rect x="1156.8" y="165" width="0.2" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1159.82" y="175.5" ></text>
</g>
<g >
<title>runtime.preemptM (21 samples, 0.02%)</title><rect x="1188.1" y="181" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1191.10" y="191.5" ></text>
</g>
<g >
<title>runtime.stdcall2 (73 samples, 0.08%)</title><rect x="1186.7" y="117" width="1.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1189.73" y="127.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (292 samples, 0.33%)</title><rect x="1120.0" y="213" width="3.9" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1123.04" y="223.5" ></text>
</g>
<g >
<title>runtime.casgstatus (13 samples, 0.01%)</title><rect x="1084.8" y="149" width="0.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1087.77" y="159.5" ></text>
</g>
<g >
<title>runtime.preemptone (23 samples, 0.03%)</title><rect x="1188.1" y="197" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1191.09" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (64 samples, 0.07%)</title><rect x="1153.3" y="181" width="0.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1156.32" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (220 samples, 0.25%)</title><rect x="1173.4" y="213" width="2.9" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1176.35" y="223.5" ></text>
</g>
<g >
<title>runtime.stdcall1 (39 samples, 0.04%)</title><rect x="1183.4" y="149" width="0.6" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1186.44" y="159.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (23 samples, 0.03%)</title><rect x="1124.5" y="229" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1127.45" y="239.5" ></text>
</g>
<g >
<title>runtime.recv.goready.func1 (108 samples, 0.12%)</title><rect x="1188.6" y="245" width="1.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1191.55" y="255.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (14 samples, 0.02%)</title><rect x="1125.5" y="181" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1128.47" y="191.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (20 samples, 0.02%)</title><rect x="1149.9" y="181" width="0.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1152.90" y="191.5" ></text>
</g>
</g>
</svg>
